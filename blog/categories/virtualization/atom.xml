<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: virtualization | SysAdmin's Journey]]></title>
  <link href="http://sysadminsjourney.com/blog/categories/virtualization/atom.xml" rel="self"/>
  <link href="http://sysadminsjourney.com/"/>
  <updated>2015-10-30T16:57:21-05:00</updated>
  <id>http://sysadminsjourney.com/</id>
  <author>
    <name><![CDATA[Justin Ellison]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Performing a CentOS Anaconda-based Install on a Linode for Kickstart, Root LVM and SELinux Features]]></title>
    <link href="http://sysadminsjourney.com/content/2010/02/22/performing-centos-anaconda-based-install-linode-kickstart-root-lvm-and-selinux-features"/>
    <updated>2010-02-22T00:00:00-06:00</updated>
    <id>http://sysadminsjourney.com/content/2010/02/22/performing-a-centos-anaconda-based-install-on-a-linode-for-kickstart-root-lvm-and-selinux-features</id>
    <content type="html"><![CDATA[<p><a href="http://www.linode.com/?r=c4f79463ba583ec1f15e3307190bda4bda9d65df">Linode</a>
rocks. Seriously, read <a href="http://sysadminsjourney.com/content/2008/08/01/linode-review">my
review</a>. I was
talking to a co-worker (whom I converted to
<a href="http://www.linode.com/?r=c4f79463ba583ec1f15e3307190bda4bda9d65df">Linode</a> as
well) about how I would pay double the amount to keep my
<a href="http://www.linode.com/?r=c4f79463ba583ec1f15e3307190bda4bda9d65df">Linode</a>
now that I know how much I use it. Don&rsquo;t tell them that, they&rsquo;re cheap :) If
you find this article helpful (or my article about <a href="http://sysadminsjourney.com/content/2008/11/26/bringing-your-linode-%0Ahome-you">moving VM&rsquo;s to and from
Linode</a>), please consider clicking one of the links in this article to sign
up for a
<a href="http://www.linode.com/?r=c4f79463ba583ec1f15e3307190bda4bda9d65df">Linode</a> -
if you sign up for 90 days, I&rsquo;ll get $20 credited to my account. I was setting
up a second
<a href="http://www.linode.com/?r=c4f79463ba583ec1f15e3307190bda4bda9d65df">Linode</a>
that was to be a testing ground for some
<a href="http://blog.linode.com/2010/02/09/introducing-stackscripts/">StackScripts</a>
I&rsquo;m working on. The new
<a href="http://www.linode.com/?r=c4f79463ba583ec1f15e3307190bda4bda9d65df">Linode</a>
will eventually replace my existing one. For whatever reason, the most recent
version of CentOS they had available was 5.3. Not a big deal, I can &lsquo;yum
upgrade&rsquo; up to 5.4 after installation. Well, after doing so, I found that a
lot of features that I wanted had been stripped out. In Linode&rsquo;s defense, it&rsquo;s
in their best interest to offer very stripped down images for their customers.
The one feature I wanted that I couldn&rsquo;t get enabled was SELinux, and simply
installing the packages still wouldn&rsquo;t let me use &lsquo;setenforce 1&rsquo; to get it
turned on. My best guess as to why is that the Linode kernel didn&rsquo;t support
it, but I honestly didn&rsquo;t troubleshoot it too much. I really wanted root LVM
capabilities as well, so I decided that a full-on anaconda based installation
was the way to go. Plus, I couldn&rsquo;t find anything in the forums about it, so
there was the lure of being the first to do it ;-) Well, thanks to the
flexibility offered by
<a href="http://www.linode.com/?r=c4f79463ba583ec1f15e3307190bda4bda9d65df">Linode</a>,
not only can you do a anaconda-based installation (with optional Kickstart),
but you can do so using the GUI over VNC if you&rsquo;re so inclined!</p>

<h3>Step 1: Setup Finnix</h3>

<p>Finnix is the distro of Linode&rsquo;s choice for &lsquo;rescue&rsquo; operations on your
server. Think of it as a Swiss Army knife - it&rsquo;s a very powerful tool that
takes very little setup. For more on Finnix, checkout the <a href="http://library.linode.com/troubleshooting/finnix-recovery">Linode Library
article</a>. First, we
need to setup a very small, 20MB ext3 disk that will house our installation
kernel and initrd. Set up another ext3 disk of 100MB to be mounted at /boot
for PV-GRUB. Finally, setup your raw disk that will be used for the OS
installation. Since we&rsquo;ll be using LVM, you can easily add to and resize your
disk later, so don&rsquo;t overdo it. I went with 5GB for my root disk. If you&rsquo;re
following along, here&rsquo;s what you should have: <img src="/assets/images/linode-%0Adisks.png" alt="" /> Now, setup a Finnix configuration profile. Click on &ldquo;Create a new
configuration profile&rdquo;, and type &ldquo;Finnix Rescue&rdquo; for the label. For the
kernel, select &ldquo;Recovery - Finnix (kernel)&rdquo;. For /dev/xvda, select the
&ldquo;Recovery - Finnix (iso)&rdquo;. For /dev/xvdb, select the &ldquo;Centos 5.4 Install
Disk&rdquo;. For uncompressed initrd image, select &ldquo;Recovery - Finnix (initrd).
Leave the other settings at defaults, and save the profile. Here&rsquo;s what it
should look like: <img src="/assets/images/linode-finnix.png" alt="" /></p>

<h3>Step 2: Upload the Xen-enabled Kernel and Initrd from the DVD</h3>

<p>Next, boot Finnix from your
<a href="http://www.linode.com/?r=c4f79463ba583ec1f15e3307190bda4bda9d65df">Linode</a>
control panel. Click on the console tab, and launch the AJAX console. Once at
the console, we need to mount our install disk, and fetch the xen-enabled
kernel and initrd from your favorite mirror. Mount the installation disk,
change directories, and download the files:</p>

<pre><code>mount /dev/xvdb /mnt/xvdb 
cd /mnt/xvdb
for f in initrd.img vmlinuz; do
wget http://mirror.unl.edu/centos/5.4/os/i386/images/xen/${f}
done
cd
umount /mnt/xvdb
</code></pre>

<p>Now, shutdown Finnix from the
<a href="http://www.linode.com/?r=c4f79463ba583ec1f15e3307190bda4bda9d65df">Linode</a>
control panel.</p>

<h3>Step 3: Setup the CentOS configuration profile</h3>

<p>Create a new profile, and name it CentOS 5.4. For the kernel, select &ldquo;pv-grub-
x86_32&rdquo;. For /dev/xvda, select &ldquo;CentOS 5.4 PV-GRUB Boot&rdquo;. For /dev/xvdb choose
&ldquo;CentOS 5.4 OS Disk&rdquo;. For /dev/xvdh, select our &ldquo;CentOS 5.4 Install Disk&rdquo;.
Point the root device to a custom location: &ldquo;/dev/mapper/VolGroup00-LogVol00&rdquo;.
Leave the rest as defaults, here&rsquo;s a screenshot: <img src="/assets/images/linode-%0Acentos.png" alt="" /></p>

<h3>Step 4: Boot the CentOS configuration profile and start the installation</h3>

<p>Save the profile, and boot it. Note that it won&rsquo;t boot automatically, we have
to point GRUB in the right direction first. You&rsquo;ll be greeted by a scary-
looking &lsquo;grubdom>&rsquo; prompt. Now, we need to tell grub to boot our install
kernel and initrd:</p>

<pre><code>root (hd2)
kernel (hd2)/vmlinuz
initrd (hd2)/initrd.img
boot
</code></pre>

<p>Note that if you want to do a kickstart install, you would append
ks=<a href="http://my.com/this.ks">http://my.com/this.ks</a> to the kernel line above. More on this later. Once
the kernel loads, you&rsquo;ll be presented with the familiar anaconda text-based
installer. Choose your language, and your installation type. I prefer HTTP
from a mirror. If you choose to do the same, use the mirror hostname for the
Web site name, and the path to the directory that contains all the release
notes &ndash; usually it&rsquo;s /centos/5.4/os/i386/. Anaconda will fetch the stage2
image, then launch the installer. Here&rsquo;s where it gets cool - it will give you
a choice to &ldquo;Start VNC&rdquo;. If you choose this option, you can connect to your
<a href="http://www.linode.com/?r=c4f79463ba583ec1f15e3307190bda4bda9d65df">Linode</a>
via VNC (note it launches on display 1, not 0), and complete the installation
via a GUI. Install as you would any other CentOS installation. <strong>Make note of
where your root directory is at.</strong> The installer may complain about your
/dev/xvdh being a loop device, tell anaconda to ignore it. Exclude /dev/xvda
from any partitioning, we&rsquo;ll set that up manually later.</p>

<h3>Step 5: Modify the CentOS configuration profile and start the operating</h3>

<p>system</p>

<p>Once you click the &ldquo;Reboot&rdquo; button on the installer, you&rsquo;ll be disconnected
from VNC. Your machine will be restarted, but it will stick at the grubdom
prompt again - that&rsquo;s okay. We&rsquo;ll be stuck at the grubdom> prompt one more
time - use this to tell it to boot CentOS using the boot partition the
installer setup for us:</p>

<pre><code>grubdom&gt; root (hd1,0)                                                          
grubdom&gt; kernel (hd1,0)/vmlinuz-2.6.18-164.el5xen                              
grubdom&gt; initrd (hd1,0)/initrd-2.6.18-164.el5xen.img                           
grubdom&gt; boot
</code></pre>

<p>You will then boot into CentOS - exit the system settings GUI - you can run it
again later by running system-config-securitylevel-tui. Now we need to setup
our boot disk so that pv-grub knows how to boot our kernel so we&rsquo;re not
consistently prompted upon reboot.
<a href="http://www.linode.com/?r=c4f79463ba583ec1f15e3307190bda4bda9d65df">Linode</a>
uses PV-GRUB to boot our kernel, and it&rsquo;s looking for a &lsquo;boot&rsquo; directory
directly on /dev/xvda. For more details, <a href="http://www.linode.com/wiki/index.php/PV-GRUB#Partitioning">see the Linode
Wiki</a>. Run this as
root, and make sure your block devices are aligned with mine before
copy/pasting:</p>

<pre><code>mkdir /mnt/newboot
mkfs.ext3 /dev/xvda
mount /dev/xvda /mnt/newboot
rsync -av /boot /mnt/newboot
cd /mnt/newboot/boot
ln -s . boot
cd
umount /mnt/newboot
umount /boot
e2label /dev/xvdb1 oldboot
e2label /dev/xvda /boot
</code></pre>

<p>That&rsquo;s it - reboot, and you should be up and running! You can create a LVM
physical volume out of the old boot partition on /dev/xvdb1, or just leave it
around unused.</p>

<h3>Streamlining the process with Kickstart</h3>

<p>We can use kickstart to <strong>really</strong> streamline the process. Follow steps 1, 2,
and 3 above, but on step 4, replace the kernel line with this:</p>

<pre><code>kernel (hd2)/vmlinuz ks=http://www.sysadminsjourney.com/assets/files/linode-minimal.ks
</code></pre>

<p>That&rsquo;s it! The kickstart file handles partitioning, and setting up the right
boot partition, as well as disabling unneeded services that you don&rsquo;t need for
a Linode. Make sure you check out the file
<a href="http://www.sysadminsjourney.com/assets/files/linode-minimal.ks">http://www.sysadminsjourney.com/assets/files/linode-minimal.ks</a> - your root password is there, change it immediately! Stay
tuned for my CentOS <a href="http://blog.linode.com/2010/02/09/introducing-stackscripts/">StackScripts</a>!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Bringing your linode home with you]]></title>
    <link href="http://sysadminsjourney.com/content/bringing-your-linode-home-you"/>
    <updated>2008-11-26T00:00:00-06:00</updated>
    <id>http://sysadminsjourney.com/content/bringing-your-linode-home-with-you.html</id>
    <content type="html"><![CDATA[<p><a href="http://www.linode.com/?r=c4f79463ba583ec1f15e3307190bda4bda9d65df">Linode</a> is, in my opinion, the best webhost out there. I recently switched this site from Wordpress to Drupal. In preparation for this switch, I wanted to be able to start with a clean slate - wipe the O/S and all, and install Drupal on top of that. Since I'm a sysadmin, I hate downtime! Read on to learn how I made my <a href="http://www.linode.com/?r=c4f79463ba583ec1f15e3307190bda4bda9d65df">Linode</a> portable. <!--break--> <a href="http://www.linode.com/?r=c4f79463ba583ec1f15e3307190bda4bda9d65df">Linode</a> is a provider of Xen-based vm's. The intelligent way that they have provisioned their machines gives you a way to clone your VM. Using this idea, I was able to take an image of a Linode-ized CentOS installation, and run it as a VM under Xen on a spare workstation at home. I configured this Xen VM at home, but with every change I made to the image I updated a shell script to do the same. When I had my VM at home ready to go, I sufferred only 5 minutes of downtime while my Linode was being reconfigured! Here's the specifics on how to do this yourself.</p>


<h3>Setup Finnix on your Linode</h3>


<p>Follow the instructions for "Setting It Up" from the <a href="http://www.linode.com/wiki/index.php/Finnix#Setting_it_up">Linode Wiki article</a>.</p>


<h3>Setup the base OS</h3>


<p>In your Linode dashboard, click "Deploy a Linux Distribution", and select settings like the ones in this screenshot: <a href="http://sysadminsjourney.com/sites/sysadminsjourney.com/files/images/Linode-Centos-Creation.jpg"><img src="http://sysadminsjourney.com/sites/sysadminsjourney.com/files/images/large_Linode-Centos-Creation.jpg"></a> Now, after creating the partition, rename it to something like "Virgin CentOS Image", and resize it as small as it can go - I used 600M for mine. After resizing the partition, create a new raw partition of 10GB or so - I use this as an LVM partition and it's where I install all of my custom applications. Now, we need to make these new partitions available to your existing VM (or Finnix if this is your first). From the dashboard, click on the Finnix profile (or your custom profile) to edit it. Under the drive setup area, set /dev/xvdg to be the "Virgin CentOS Image" from above, and set /dev/xvdh to be the raw partition from above. If you changed settings to a profile that was already running, you need to reboot for the settings to take effect.</p>


<h3>Setup your Xen server at home</h3>


<p>For me, I just popped in a Centos 5.2 CD, and installed the base OS plus the virtualization package. Do not partition all the drive space, leave enough unpartitioned space to equal that of what you're using for your raw partion on your Linode. Once you've booted, we need to setup our raw partition space to use as swap and applications to the domU. Depending on your hard drive size and partition layout, there's no copy and paste solution for this. If you're geek enough to want to do this, you know how to use fdisk, don't you? For the sake of this article, /dev/hda3 is a 512M swap partition(type 82), and /dev/hda5 is a LVM partition of 10GB (type 8e).</p>


<h3>Make the base image</h3>


<p>Now, we need to make a file-backed image of the CentOS installation on our Linode. At the same time, we will create a gzipped backup so we have something local to restore from if we hose something up or want to test our provisioning script. On your Xen server at home, run the following as root: <code> mkdir -p /var/vms/linode-clone/ cd /var/vms/linode-clone/ ssh root@mylinode.com "dd if=/dev/xvdg bs=102400" | gzip -dc | dd of=root.img bs=102400 gzip -c root.img &gt; virgin.img.gz dd if=/dev/zero bs=1048576 count=2000 &gt;&gt; root.img e2fsck -f root.img resize2fs -p root.img </code> Phew! What did that do? The ssh + dd command made a bit for bit copy of the virgin partition on your Linode, and created a file on the local host with it's contents. The gzip command made a compressed copy of the image to restore from later. The dd using /dev/zero padded the end of that file by 2GB, giving us 2GB at the end of the partition to work with. The e2fsck and resize2fs updated the filesystem contained within that file to the new size. Now, on to setting up our kernel.</p>


<h3>Kernel setup</h3>


<p>We need to grab a copy of the kernel source from Linode, and build it for our Xen domU. You can browse the Linode kernels at http://www.linode.com/src. I recommend 2.6.18.8-linode10.tar.bz2. From your Xen server, run the following: <code> yum install gcc gcc-c++ kernel-devel mkdir -p /usr/src/ cd /usr/src/ wget http://www.linode.com/src/2.6.18.8-linode10.tar.bz2 tar -xjvf 2.6.18.8-linode10.tar.bz2 cd 2.6.18.8-linode10 ssh root@mylinode.com "cat /proc/config.gz" | gzip -dc &gt; .config make oldconfig make cp arch/i386/boot/vmlinuz /var/vms/linode-clone/kernel-2.6.18.8-linode10.gz </code> This creates a kernel identical to the one that your Linode host is running. Next up, setting up our Xen config.</p>


<h3>Xen configuration</h3>


<p>Change to /etc/xen, and create a file named linode-clone. Paste the following into it:</p>


<pre>name = "linode-clone"
uuid = "a6864d4d-1c6f-ea12-3e08-b6b89015bb77"
maxmem = 540
memory = 540
vcpus = 1
kernel = "/var/vms/linode-clone/kernel-2.6.18.8-linode10.gz"
root = "/dev/xvda ro"
on_poweroff = "destroy"
on_reboot = "restart"
on_crash = "restart"
vfb = [  ]
disk = [ "file:/var/vms/linode-clone/root.img,xvda,w", "phy:/dev/hda3,xvdb,w", "phy:/dev/hda5,xvdc,w" ]
vif = [ "mac=00:16:3e:57:53:3f,bridge=xenbr0" ]
extra = "xencons=tty"
</pre>


<p>At this point, you should have a Xen domU ready-to-run. To boot your Xen VM and attach a console, run this:</p>


<pre>xm create -c linode-clone
</pre>


<p>It should boot for you, and drop you into a login prompt. Feel free to login as root (using the password specified during the linode setup phase). Make some changes to the filesystem. CTRL+] will disconnect you from the domU console, 'xm console linode-clone' will re-attach. Now, power off your domU by doing a 'shutdown -h now' from within the domU. You can restore back to a virgin install by doing a "gzip -dc /var/vms/linode-clone/linode-virgin-centos.img.gz &gt; /var/vms/linode-clone/root.img" -- make sure the domU is shut down first! When you boot back in by doing a 'xm create -c linode-clone', you'll see that your filesystem changes are gone. Stay tuned for part two, where I'll show you the basics of creating a provisioning script for your domU. Part three will then cover how to push your local images back up to your <a href="http://www.linode.com/?r=c4f79463ba583ec1f15e3307190bda4bda9d65df">Linode</a>.</p>


<h3>Shameless plugging</h3>


<p>Scattered throughout this post are links to <a href="http://www.linode.com/?r=c4f79463ba583ec1f15e3307190bda4bda9d65df">Linode</a>. If you're not a customer and would like to be, please consider clicking on one of those links to sign up. It will cost you nothing, but will give me a $20 credit on my account if you sign up and stay a customer for 90 days.</p>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[VirtualBox 2.0 Quick Impressions]]></title>
    <link href="http://sysadminsjourney.com/content/2008/09/10/virtualbox-20-quick-impressions"/>
    <updated>2008-09-10T00:00:00-05:00</updated>
    <id>http://sysadminsjourney.com/content/2008/09/10/virtualbox-2-0-quick-impressions</id>
    <content type="html"><![CDATA[<p>I&rsquo;m not new to the virtualization scene, but I&rsquo;m no expert either &ndash; I&rsquo;ve been
using <a href="http://www.vmware.com">VMWare</a> Workstation since 1.0,
<a href="http://www.vmware.com">VMWare</a> Server since 1.0, and
<a href="http://www.xensource.org">Xen</a> since around 2.0. Well, I needed a Windows XP
install on my laptop, and decided it would be a good time to see how
<a href="http://www.virtualbox.org">VirtualBox</a> compared. <a href="http://www.virtualbox.org">VirtualBox
2.0</a> was just released
(<a href="http://www.virtualbox.org/wiki/Changelog">changelog</a>), so I went with the
bleeding edge. Read on for my quick review of
<a href="http://www.virtualbox.org">Virtualbox</a> 2.0.  My laptop was running Ubuntu
Hardy, but your experience is likely to be the same no matter the distro you
prefer.</p>

<h3>Installation</h3>

<p>Not much to say here. I clicked a link on <a href="http://www.virtualbox.org/wiki/Downloads">the download
page</a>, GDebi popped up, and I
installed the deb. Can&rsquo;t get much easier!</p>

<h3>Guest OS Installation</h3>

<p>Anyone familiar with VMWare workstation should feel right at home here. Fire
up the gui, click &lsquo;New&rsquo;, create a new Windows XP guest machine. I accepted the
defaults of 192MB RAM and 10GB disk. Now, it&rsquo;s been a really long time since
I&rsquo;ve installed Windows XP, but I swear that the installation went faster from
within VirtualBox than natively. No metrics to back that up, just a gut
feeling.</p>

<h3>Networking</h3>

<p>Worked out of the box. I accepted the default configuration of NAT through the
host. Immediately I ran Windows Update after installation, and went to bed.
The next day, everything had worked as it should have.</p>

<h3>Performance</h3>

<p>The changelog states that numerous performance improvements have been made
since 1.0, but since I don&rsquo;t have past experience, I can&rsquo;t speak to how much
better it performs. I can tell you that running Windows XP as a guest under
Virtualbox 2.0 did not feel any faster, nor any slower that running Windows XP
as a guest under VMWare Workstation on the same laptop. While installing SP3
for Windows XP in the guest, I noticed fairly significant host responsiveness
degradation. However, my laptop still has a PATA drive in it, and my XP VM was
using the &ldquo;hard disk as a file&rdquo; method instead of a dedicated partition. My
hunch is that support for <a href="http://en.wikipedia.org/wiki/NCQ">NCQ</a> and
dedicated partitions helps this quite a bit. Also, when using the XP VM under
normal conditions that didn&rsquo;t write to the disk so extensively, the host
machine was still very responsive.</p>

<h3>Hardware Support</h3>

<p>Below is the list of what I&rsquo;ve tested under my XP VM:</p>

<ul>
<li><strong>USB:</strong> I&rsquo;ll get to this eventually, but I don&rsquo;t need it yet.</li>
<li><strong>Sound:</strong> Worked flawlessly.</li>
<li><strong>CD/DVD Drive:</strong> No problems here either.</li>
</ul>


<h3>Verdict</h3>

<p>VirtualBox is an impressive product. Consider me a convert from VMWare
Workstation, VirtualBox does everything I need it to and more, and the cost of
zero is something VMWare Workstation can&rsquo;t begin to compete with!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Linode Review]]></title>
    <link href="http://sysadminsjourney.com/content/2008/08/01/linode-review"/>
    <updated>2008-08-01T00:00:00-05:00</updated>
    <id>http://sysadminsjourney.com/content/2008/08/01/linode-review</id>
    <content type="html"><![CDATA[<p>I recently switched from
<a href="http://www.aplus.net" title="Aplus.net">Aplus.net</a> shared Unix hosting
to
<a href="http://www.linode.com/?r=c4f79463ba583ec1f15e3307190bda4bda9d65df" title="Linode">Linode</a>
Xen-based VPS hosting. Follow the jump to read my reviews of both.
I had a shared Unix account with Aplus.net for about a year. Aplus
used FreeBSD with jails to provide their shared hosting. While that
gave me the ability to ssh into the box, I could not get root. It
did however, work quite well - the control panel is nice, and you
could use about anything you wanted to. I never needed to use their
support, their control panel worked great, and I never had any
issues with billing. There were two drawbacks, one minor, the other
major:
1.  The box was firewalled to death. I&rsquo;m all for firewalls, but I
    like to be in control of it. Not only were inbound ports blocked
    (which is a good thing), but all outbound access was blocked as
    well. This made hard things impossible, and easy things hard. For
    example, adding a simple RSS widget to your page hosted on Aplus
    just will not work.
2.  The particular box I was on was severely over-sold. I have no
    idea how many shared accounts there were on the box, but there were
    times where my simple little wordpress blog was completely
    unavailable. $12 a month is cheap, but I at least expect to be able
    to render pages!</p>

<p>After doing a bunch of research, my choice for a new hosting
provider was down to
<a href="http://www.linode.com/?r=c4f79463ba583ec1f15e3307190bda4bda9d65df" title="Linode">Linode</a>
and <a href="http://www.slicehost.com" title="SliceHost">SliceHost</a>. In the end,
I settled on
<a href="http://www.linode.com/?r=c4f79463ba583ec1f15e3307190bda4bda9d65df" title="Linode">Linode</a>
because I was reading some grumblings that SliceHost was having
some growing pains, and I couldn&rsquo;t find any negatives to
<a href="http://www.linode.com/?r=c4f79463ba583ec1f15e3307190bda4bda9d65df" title="Linode">Linode</a>.
So, at 10:57pm on July 30th, I started the sign up process for a
<a href="http://www.linode.com/?r=c4f79463ba583ec1f15e3307190bda4bda9d65df" title="Linode">Linode</a>
540 in their Dallas datacenter. At 11:07pm that night (10 minutes
later!) I had full access to my server. Very impressive! By 11pm on
July 31st, I had moved my blog from Aplus to
<a href="http://www.linode.com/?r=c4f79463ba583ec1f15e3307190bda4bda9d65df" title="Linode">Linode</a>
without any hitches. First, let me tell you what
<a href="http://www.linode.com/?r=c4f79463ba583ec1f15e3307190bda4bda9d65df" title="Linode">Linode</a>
is and isn&rsquo;t.
-   <strong>Linode is</strong>a provider of Xen-based virtualized hosts. This
    means you get to pick which distribution you want, and you get your
    own root account with which you can do what you feel like.
-   <strong>Linode provides</strong>a DNS Manager included with all their plans
    that allows you have full control over any number of domains. I had
    no idea this existed until I signed up, and it was a great little
    side benefit. I was able to cancel my DNS service at a registrar
    that I was paying $15 a year for.
-   <strong>Linode provides</strong>you with a Xen instance with 4 cores of Xeon
    for CPU, and a configurable amount of RAM, bandwidth, and storage.
-   <strong>Linode provides</strong>a out-of-band management tool named lish
    (LInode SHell) which gives you console level access to your
    server.  There is also an AJAX web-based console interface
    available.
-   <strong>Linode provides</strong>you with everything you need to build your
    own server. You may do with this server what you like, provided
    it&rsquo;s for law-abiding activities. You have the ability to create
    your own partitions, upgrade your kernel, install packages,
    whatever!
-   <strong>Linode provides</strong>you with more than enough rope with which
    you can hang yourself! This is a logical extension of the above
    point. If you have root, you can most certainly do a &lsquo;rm -rf /&rsquo; and
    no one will stop to ask you if you&rsquo;re sure or not.
-   <strong>Linode is not</strong>your run-of-the-mill webhoster. If you want to
    run your own LAMP stack, you are more than welcome to do so.
    However, <strong>you</strong>are responsible for the setup and maintanence of
    the entire stack. There&rsquo;s no cute little control panel button you
    click to setup a blog. If you don&rsquo;t know Linux, and don&rsquo;t want to
    learn how to do these sort of things, you&rsquo;re better off with a
    provider such as Aplus.net.</p>

<p>After signing up, you get to pick which data center you want your
server to be hosted in.  Here are their current datacenters:
-   Newark, NJ
-   Atlanta, GA
-   Dallas, TX
-   Fremont, CA</p>

<p>You can view what servers are available in what datacenters
<a href="http://www.linode.com/avail.cfm?r=c4f79463ba583ec1f15e3307190bda4bda9d65df" title="Linode Datacenter Availability">here</a>.
Here are some of Linode&rsquo;s support options:
-   A quick
    <a href="http://www.linode.com/faq.cfm?r=c4f79463ba583ec1f15e3307190bda4bda9d65df" title="FAQ">FAQ</a>
-   A
    <a href="http://www.linode.com/wiki/?r=c4f79463ba583ec1f15e3307190bda4bda9d65df" title="Wiki">Wiki</a>
-   A public
    <a href="http://www.linode.com/forums/?r=c4f79463ba583ec1f15e3307190bda4bda9d65df">support forum</a>
    which employees take part in regularly
-   An
    <a href="http://www.linode.com/irc/?r=c4f79463ba583ec1f15e3307190bda4bda9d65df">IRC channel</a>
-   A support ticket system for active customers
-   There is a phone number posted on their site, but I don&rsquo;t think
    it&rsquo;s intended to be used for support issues.</p>

<p>After just two days of running my own
<a href="http://www.linode.com/?r=c4f79463ba583ec1f15e3307190bda4bda9d65df" title="Linode">Linode</a>,
I must say that I&rsquo;m thoroughly impressed. Uptime is 100%, and I
haven&rsquo;t needed support for anything at all. My blog runs as it
should - and if it didn&rsquo;t it would be my fault for not setting it
up properly. I will update this post in the future with more data
as I learn more about the service. Also, if you&rsquo;d like to give
<a href="http://www.linode.com/?r=c4f79463ba583ec1f15e3307190bda4bda9d65df" title="Linode">Linode</a>
a try and have enjoyed this post, consider visiting their site by
clicking on any of the
<a href="http://www.linode.com/?r=c4f79463ba583ec1f15e3307190bda4bda9d65df" title="Linode">Linode</a>
links present in this post. They contain a referral code that will
give me $20 credit if you sign up and stay a customer for 30 days.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Per-subnet routing with Solaris 10 non-global zones]]></title>
    <link href="http://sysadminsjourney.com/content/2008/05/08/subnet-routing-solaris-10-non-global-zones"/>
    <updated>2008-05-08T00:00:00-05:00</updated>
    <id>http://sysadminsjourney.com/content/2008/05/08/per-subnet-routing-with-solaris-10-non-global-zones.html</id>
    <content type="html"><![CDATA[<p>I had the chance to finally tinker with Solaris 10 zones the other day. They are impressive - very easy to setup! One of my biggest gripes about Solaris is that they've fallen way behind in the area of advanced IP routing. If you want to do things like policy routing in Solaris, you have to install ipfilter, which is no easy task. There is no alternative to iproute2 in Linux. Read after the jump to find a quick hack to setup proper routing for non-global zones on multiple subnets. <!--break--> <em>Update: If you are using Solaris 10 Update 4 or newer, you may be able to use </em><code>set ip-type=exclusive</code><em> in your zone config. This will give you what I've hacked together here. Note, that you must have a dedicated interface for the zone in order to use it, and there are some other limitations, <a href="http://docs.sun.com/app/docs/doc/817-1592/gepxo?l=en&amp;a=view">described here</a>. Keep an eye on <a href="http://opensolaris.org/os/project/crossbow/">project Crossbow</a>, which will hopefully make all of this go away.</em> In Solaris 10, you set the default gateway at boot time by using /etc/defaultrouter. You can add multiple default routes by adding multiple lines to that file. However, if you do that, the kernel will simply round-robin the packets between the gateways, which will light up any firewall like a Christmas tree. Imagine the following scenario: HostA is a Solaris 10 box with 4 bge interfaces. HostA's IP address is 192.168.20.2/24 and is assigned to bge0. The router for the 192.168.20.0/24 subnet is at 192.168.20.1. HostB is a non-global zone residing on HostA, with an IP address of 192.168.30.2/24 and you've assigned it to bge1 via zonecfg. The router for the 192.168.30.0/24 subnet is at 192.168.30.1. Now, non-global zones don't have their own kernel, they "share" with the global zone. IP routing is handled in the kernel, so the routing configuration for the non-global zone needs to be done in the global zone. The first trick here is to get bge1 to come up on bootup, but not assign it an IP. Do this as root on HostA to establish that:</p>


<pre># echo "0.0.0.0" &gt; /etc/hostname.bge1</pre>


<p>This will plumb and bring up the interface, but it will not be assigned an IP. Now, remember what I said about the kernel round-robin routing packets earlier? It will only do that <strong>if both gateways are reachable</strong>. So, the trick is to make HostB's gateway unreachable from HostA, and HostA's gateway unreachable from HostB. There's a catch-22 here as well, you can only add a default route if the gateway is currently reachable. So how in the world do we get this to work??? With some nice hackery, of course! First, set HostB's configuration so that it does not boot automatically. Don't worry if you need this functionality, we've got a hack for that too:</p>


<pre>root@HostA # zonecfg -z HostB
zonecfg:HostB&gt; set autoboot=false
zonecfg:HostB&gt; verify
zonecfg:HostB&gt; commit
zonecfg:HostB&gt; exit</pre>


<p>Now, we are going to create our own init script that will bring up bge1 temporarily with HostB's IP, set the default route, then remove that IP. By using HostB's IP, we are allowed to set the route, but when we remove the interface, HostB's gateway becomes unreachable from HostA. Finally, we boot HostB, which sees only the default route for it's interface. Let's setup that init script:</p>


<pre># cat &lt;&lt;EOD &gt; /etc/init.d/zoneboot
#!/usr/bin/sh

/usr/sbin/ifconfig bge1 addif 192.168.30.2/24 up
/usr/sbin/route add default 192.168.30.1
/usr/sbin/ifconfig bge1 removeif 192.168.30.2
/usr/sbin/zoneadm -z HostB boot
EOD

# ln -s /etc/init.d/zoneboot /etc/rc3.d/S99zoneboot</pre>


<p>You can of course modify this script to work with more interfaces and zones, but you get the idea. Now, reboot HostA. HostA's routing table looks like so:</p>


<pre># netstat -rn

Routing Table: IPv4
  Destination           Gateway           Flags  Ref     Use     Interface
default              192.168.30.1          UG       1        119
default              192.168.20.1          UG       1        112
192.168.20.2         192.168.20.2          U        1         35 bge0
224.0.0.0            192.168.20.2          U        1          0 bge0
127.0.0.1            127.0.0.1             UH       4        113 lo0</pre>


<p>HostA has two default gateways, but only one of them is reachable. Bingo! HostB's routing table looks like this:</p>


<pre>
Routing Table: IPv4
  Destination           Gateway           Flags  Ref     Use     Interface
default              192.168.30.1           UG      1        112
192.168.30.0         192.168.30.2           U       1         27 bge1:1
224.0.0.0            192.168.30.2           U       1          0 bge1:1
127.0.0.1            127.0.0.1              UH      4        108 lo0:2</pre>


<p>Success! Hope you found this helpful!</p>



]]></content>
  </entry>
  
</feed>
