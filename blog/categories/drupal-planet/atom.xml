<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Drupal Planet | SysAdmin's Journey]]></title>
  <link href="http://sysadminsjourney.com/blog/categories/drupal-planet/atom.xml" rel="self"/>
  <link href="http://sysadminsjourney.com/"/>
  <updated>2012-09-07T21:40:43-05:00</updated>
  <id>http://sysadminsjourney.com/</id>
  <author>
    <name><![CDATA[Justin Ellison]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[It's not you, it's me: Call for Node Gallery co-maintainers]]></title>
    <link href="http://sysadminsjourney.com/content/2011/10/19/its-not-you-its-me-call-node-gallery-co-maintainers"/>
    <updated>2011-10-19T00:00:00-05:00</updated>
    <id>http://sysadminsjourney.com/content/2011/10/19/its-not-you-its-me-call-for-node-gallery-co-maintainers</id>
    <content type="html"><![CDATA[<p>There's only a certain amount of bandwidth in a person's day. As you get
older, that bandwidth seems to become more and more constrained. Kids are
extreme bandwidth hogs :) Over the years I've found that I have enough
bandwidth in my life to deal with one obsession that's not part of my day job
at any given time. For the last couple years, that obsession has been with
<a href="http://drupal.org">Drupal</a> and specifically with <a href="http://drupal.org/project/node_gallery">Node
Gallery</a>. In my very biased opinion,
it's the most user-friendly and integrated gallery experience you can have
with Drupal 6.x. Also IMHO, there's a huge void in Drupal 7 with respect to
butt-kicking gallery modules, one that's begging to be filled with a Node
Gallery 7.x branch. But I just can't bring myself to that one simple git
command. I've had several changes at work in the past year, and I'm no longer
working with Drupal and PHP on a regular basis. I've become enthralled with
Puppet as of late, and that's proven to be the gateway drug to the devops
movement for me. I'm reading books on Kanban, learning a bit of Ruby, building
deployment pipelines, and soaking up anything I can on devops. It seems
sysadmins who can code really do have a place in the world, and it appears to
be in devops. It's not burnout, it's simply a matter of prioritization on
demands for a limited resource. There's just no time left over for Drupal
anymore. Back to the point of this post -- Node Gallery needs a co-maintainer
who can take the module into the 7.x branch. The recently released 6.x-3.x
branch has proven to be quite stable, and would likely require only very
minimal maintenance. You can take it for a spin on the <a href="http://ng3demo.sysadminsjourney.com">demo
site</a>, or read all about it's features on
the <a href="http://drupal.org/project/node_gallery">project page</a>. Here's some quick
points:</p>

<ul>
<li>It has a reported user base of just under 3,800 sites, which puts it at right around #400 on the top modules list.</li>
<li>It has a great user base that's proven to be active in the issue queue. Many of the support requests have been resolved by members of the community whom have never written a line of code. It has a strong German presence, and has been translated.</li>
<li>It integrates very tightly with <a href="http://drupal.org/project/views">Views</a>, and supports bulk uploading with <a href="http://drupal.org/project/plupload">Plupload</a>. It has it's own access module in <a href="http://drupal.org/project/node_gallery_access">Node Gallery Access</a>, as well as a handful of other modules (all of which are listed on the <a href="http://drupal.org/project/node_gallery">project page</a>) it integrates with very well.</li>
<li>It's been engineered to perform well from the start. If your server can handle the load of 100,000 nodes, there's no reason it should be able to handle 100,000 Node Gallery image nodes -- even if those are all in one gallery.</li>
<li>The administration UI aims to provide a working gallery setup out-of-the-box that works for 90% of the users, yet provide enough buttons and knobs for the remaining 10% to be able to tweak what they need.</li>
<li>It runs the gamut of technologies in Drupal; making use of caching, Views integration, jQuery and jQuery UI, CCK, Node Access, Batch API, etc.</li>
<li><p>What differentiates Node Gallery from most other gallery modules is that each and every image in a gallery isn't just a field, it's an entire node. This opens up huge possibilities for interactions with other contrib modules. The original reason for me selecting Node Gallery was because it was the only way I could sell individual images using Ubercart.
Who I'm looking for:</p></li>
<li><p>This module is likely a bit complex for someone who's never maintained a module before. If you've maintained your own Drupal module (either privately or on d.o), take a look at the code and make sure you can understand what's going on.</p></li>
<li>Drupal 7 API experience is a must; experience in migrating D6 modules to D7 is a plus.</li>
<li>Ideally, you need to have an "itch that needs scratching" -- in other words, you should probably have a need for an image gallery.
If you'd like to take a crack at bringing Node Gallery to Drupal 7, <a href="http://drupal.org/user/99149/contact">contact
me</a>, or <a href="http://drupal.org/node/add/project-issue/node_gallery">file an
issue</a> in the issue
queue.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Drupal on Heroku]]></title>
    <link href="http://sysadminsjourney.com/content/2011/09/20/drupal-heroku"/>
    <updated>2011-09-21T00:00:00-05:00</updated>
    <id>http://sysadminsjourney.com/content/2011/09/20/drupal-on-heroku</id>
    <content type="html"><![CDATA[<p><a href="http://www.heroku.com">Heroku</a> has been around for awhile now, but has been primarily a rails host. Well, <a href="http://blog.heroku.com/archives/2011/9/15/facebook/">until recently</a> anway. With the announcement of their Facebook integration, many others have noted that *any* PHP app can at least parse on Heroku's cedar stack. I'll be honest, it took me longer to get ruby+rails setup on my Macbook than it did to get a proof-of-concept installation of Drupal up and running. Here's what I did:</p>

<ol>
<li>Get ruby, rails, and the heroku gem installed and running. <a href="http://pragmaticstudio.com/blog/2010/9/23/install-rails-ruby-mac">This page</a> had me up and running pretty quickly on my Mac.</li>
<li>Download and extract Drupal:
<div>
  <pre><code class='console'>curl http://ftp.drupal.org/files/projects/drupal-6.22.tar.gz | tar -xzvf -; cd drupal-6.22</code></pre>
</div>
</li>
<li>Initialize your git repo:
<div>
  <pre><code class='console'>git init</code></pre>
</div>
</li>
<li><p>Here's what makes all this proof-of-concept only. Many of the features used in Drupal core's .htaccess file assume that the webhost has enabled the "AllowOverride All" option. Heroku doesn't allow this, it only allows a small subset of overrides. <strong>DOING THIS WILL MORE THAN LIKELY COMPROMISE THE SECURITY OF YOUR DRUPAL INSTALL. </strong>Open up .htaccess in your editor, and comment out any line that starts with these strings:</p>

<ul>
<li>Order</li>
<li>Options</li>
<li>DirectoryIndex</li>
<li>php_value</li>
</ul>
</li>
<li><p>Add Drupal to git, and commit:
<div>
  <pre><code class='console'>git add .; git commit -m 'initial commit'</code></pre>
</div>
</p></li>
<li><p>Create your heroku application. You'll need to have signed up for a free account on http://www.heroku.com and give the following command your login credentials:</p>

<p><div>
  <pre><code class='console'>heroku create --stack cedar</code></pre>
</div>
</p></li>
<li><p>Push your code up to heroku (note the URL it gives you back):
<div>
  <pre><code class='console'>git push heroku master</code></pre>
</div>
</p></li>
<li><p>Now, we need to setup the Postgres instance:</p>

<p><div>
  <pre><code class='console'>heroku addons:add shared-database</code></pre>
</div>
</p></li>
<li><p>Let's display our Postgres credentials:</p>

<p><div>
  <pre><code class='console'>heroku config</code></pre>
</div>
</p></li>
<li><p>You can now hit your Drupal instance at the URL given to you by your last git push. Install as you normally would, selecting Postgres as your database, and filling in the user, password, database, and host given to you by 'heroku config'. Make sure to change the host from localhost under the "Advanced" fieldset.</p></li>
</ol>


<p>  At this point, you can poke around your install, and start seeing what all else is broken :) 'heroku logs -t' is your friend. If you don't believe me, <a href="http://electric-mountain-6735.herokuapp.com/">here's a D7 instance</a>, and <a href="http://freezing-light-7795.herokuapp.com/">here's a D6 one</a>.</p>

<p>  Seriously, the .htaccess point is a deal-breaker. Unless someone with more time on their hands than I do can suggest a more secure configuration (or heroku allows Drupal to override all), there's some serious security ramifications to commenting out the lines in .htaccess.</p>

<p>  Drupal is definitely slow on the free plan for Heroku, but I mean, it's free; what did you expect? Drupal 6 seemed to work throughout, but I noticed when getting D7 up and running that I couldn't hit some "heavy" URL's like /admin/configure and /admin/reports/status. I could get into other sub-menus such as /admin/configure/development/performance. We all know D7 takes a fair amount of horsepower to run, and horses aren't free :). The whole point of heroku is being able to scale your app by dragging a slider in a web ui, and there's no reason to believe that Drupal wouldn't start running much faster given more resources from a non-free plan.</p>

<p>  The point of this blog post was to just jot down my notes and save someone else a little time in getting started -- hopefully the community can come up with some ideas so we have another awesome choice in Drupal hosting!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Selecting the right CDN for YOUR website]]></title>
    <link href="http://sysadminsjourney.com/content/2011/04/19/selecting-right-cdn-your-website"/>
    <updated>2011-04-19T00:00:00-05:00</updated>
    <id>http://sysadminsjourney.com/content/2011/04/19/selecting-the-right-cdn-for-your-website</id>
    <content type="html"><![CDATA[<p>At one of my jobs, we recently went through the process of selecting a
<a href="http://en.wikipedia.org/wiki/Content_delivery_network">CDN (Content Delivery Network)</a> for our site. While the first rule of
CDN’s is that “any CDN is better than no CDN”, it can be argued that
certain CDN’s are a better fit in certain situation than others. This
post is basically a summary of the process we went through when
selecting our CDN. By no means is this a statement of “XYZ is better
than ABC”, it’s simply documentation of the process we went through in
order to select the right one for our business. While most CDN’s are
compatible with Drupal via excellent contrib modules such as <a href="http://drupal.org/project/cdn">CDN</a>,
this information presented in this article is relative to any website
and isn’t Drupal-specific.</p>

<p>To illustrate the importance of a CDN using real numbers, one image
being fetched from the data center to our office takes about 323ms. That
same image fetched from Seattle is 483ms, and from Washington DC takes
599ms. The worst cases appear when coming overseas - to fetch the same
image from Paris it takes on average 1,141ms <strong>for just that one image</strong>.</p>

<p>A Content Delivery Network (CDN) shortens that distance between your
static content and the end-user. While the text on most web pages is
dynamic, most images, JavaScript, and CSS are static. These static
objects make up a large percentage of the total bytes downloaded for
each page view. By using a CDN, you place static content as close to the
end-user as possible. In turn this decreases the page load time a
end-user experiences by leaps and bounds.</p>

<h3>Pre-selection Criteria</h3>

<p>There’s a plethora of CDN’s to choose from, and if you don’t filter the
initial list down to five or fewer providers, you’ll end up spending
months in evaluation time. By defining specific must-have features, we
were able to limit the initial number of companies to compare to four.
Many CDN’s provide value-add services above and beyone static objects,
such as “Dynamic Site Acceleration” – this evaluation looked solely at
serving up static file content, e.g. JPEG, GIF, CSS, and Javascript.</p>

<p>The filtering properties we used to limit scope were:</p>

<ol>
<li><p><strong>The CDN must provide “origin pull” or “reverse proxy” support</strong>. If
the CDN receives a request for a file that doesn’t exist at the edge, it
applies a customer-defined URL rewrite to the request, and proxies the
request to the origin site. If the image exists at the origin, the edge
server caches the image locally and serves it to the client from there.
For example, the CDN host name might be cdn.example.com (which points to
the edge), and the origin site (my server) would be www.example.com. If
I point my browser to http://cdn.example.com/logo.gif, and that file
doesn’t exist at the edge, the CDN will make a request for
http://www.example.com/logo.gif. If that file exists, it is fetched and
cached. If it doesn’t exist, a 404 is returned to the client. The trade
off is that you don’t have to pre-seed static content to the CDN, but
the first user request for a static object takes a bit longer to
complete (because it results in two requests instead of one). Once the
edge network’s cache is primed, there is no performance difference
between origin pull and CDN origin.</p></li>
<li><p><strong>The CDN must propagate cache-related HTTP headers from the origin to
the end-user</strong> We’ve went to great lengths to use versioning of
filenames so that we can set far-future expires headers on 99% of our
static content as recommended by <a href="https://developer.yahoo.com/performance/rules.html">Yahoo’s “Best Practices for Speeding Up Your Website”</a>.
This results in far fewer HTTP requests to render a
page that has already been requested by the end-user previously,
ultimately decreasing page response time. Some CDN’s that offer origin
pull do not proxy these headers back.</p></li>
<li><p><strong>The CDN must use GZip compression on text-based content</strong> Most CDN’s
support this, but it’s something you definitely want to check. When
serving up static text-based content such as CSS or Javascript, the CDN
can and should compress it for you before sending it to the end-user.
Compression makes the overall page content smaller, and therefore faster
to render.</p></li>
<li><p><strong>Response time must be consistent and fast</strong> Performance is a tricky
thing. While having the fastest response time overall didn’t guarantee
that a CDN would “win”, having consistent relative poor performance
would guarantee a CDN would “lose”. Try not to focus too much on
performance numbers – most of the CDN’s will have a standard deviation
less than ten milliseconds between each other. In our research we found
out quickly that there’s a lot of features more important to us than 5ms
worth of response time.</p></li>
<li><p><strong>100% Uptime SLA</strong> Since a CDN is at it’s most basic level a
geographically distributed cluster of cache servers, it should be
implied that a CDN can provide 100% uptime. If one POP goes down,
requests should be automatically routed to the next nearest POP. If your
CDN doesn’t offer this, you need a new CDN.</p></li>
<li><p><strong>Company financial strength and solvency</strong> This is something often
overlooked when people evaluate, but was very important to us. There are
a lot of CDN’s out there, and we found only 2 or 3 that could put in
writing that they are a profitable corporation. Our implementation
required a fair amount of work, and it would take us some time to switch
to another CDN. If your CDN goes dark in the middle of the night, how
long will it take you to switch?</p></li>
</ol>


<h3>Important Features</h3>

<p>Whereas not meeting any of the above requirements would result in being
excluded from our comparison, the following features were key points of
consideration. Not meeting them all wouldn’t exclude a CDN, but on the
flip side, implementing them all would put the CDN in very good
standing.</p>

<ol>
<li><p><strong>Price</strong>. While high prices weren’t going to scare us away, bang
for the buck played a large part in our decision. We weren’t
interested in paying a premium for brand recognition.</p></li>
<li><p><strong>Strong international presence</strong>. Our guests include international
clients, and poor static object performance for those clients was
the key motivation for implementing a CDN in the first place.</p></li>
<li><p><strong>Contract terms</strong>. Some CDN’s do month-to-month, some do 12 month,
others require longer as you negotiate price.</p></li>
<li><p><strong>Overage fees</strong>. CDN’s meter you on the amount of bandwidth you
consume. You pay for a “bucket”. No CDN’s turn your service off
after you exceed that bucket, they just bill you for overages. The
good CDN’s will bill you at the same per-GB rate that you pay for
your monthly bucket. Some CDN’s charge as much as 2x for overages.
Avoid those.</p></li>
<li><p><strong>Traffic accounting</strong>. One other thing often overlooked with origin
pull CDN’s is whether or not the traffic between the edge POP’s and
the customer origin is counted as traffic against your total. Some
CDN’s count it against your bucket, others don’t.</p></li>
<li><p><strong>Setup fees</strong>. CDN’s vary wildly on their setup fees. Some are
free, some charge more than $5,000. Make sure you incorporate that
cost into your decision.</p></li>
<li><p><strong>User Interface</strong>. All CDN’s offer some form of web-based
interface. The quality of the interface greatly differs between
CDN’s. I could swear that some of the interfaces I saw were written
in CGI Perl in the late 90’s. Others interfaces offered everything a
customer could ever want, including detailed analytics and
reporting. Key questions to ask are “If I get a bad image out on the
edge, how do I purge it?”, and “How do I tell how much bandwidth is
being consumed throughout the CDN at any particular point in time?”</p></li>
</ol>


<h3>External Reporting Data</h3>

<p>We chose to invest in one month’s worth of reporting from
<a href="http://cloudharmony.com/reports">CloudHarmony’s CloudReports</a> service. This gave us a quick way to
examine performance of CDN’s to the actual end-user browser behind a
real cable/dsl/dialup connection (not to a datacenter somewhere). While
some might view those reports expensive, we found it quite a bargain to
have another independent view into the performance of a vast majority of
CDN’s.</p>

<h3>The Contenders</h3>

<p>Given the above requirements, coupled with the performance data provided
from CloudHarmony we were able to refine our list of CDN’s to consider.
In alphabetical order:</p>

<ol>
<li><a href="http://www.akamai.com">Akamai</a></li>
<li><a href="http://www.cachefly.com">CacheFly</a></li>
<li><a href="http://www.edgecast.com">EdgeCast</a></li>
<li><a href="http://www.limelight.com">LimeLight</a></li>
</ol>


<h3>First elimination: Akamai</h3>

<p>Akamai is to the CDN market what Bose is to the home audio market. While
it’s not inherently a bad product, you’re paying a huge premium for the
brand name. While we never got so far as to setup a demo account, the
performance data provided by CloudHarmony and other sources didn’t favor
them well at all. My personal opinion (which is little more than a wild
guess) on why Akamai doesn’t perform as well is because of their
product’s age. Their network is by far the largest one out there, and I
can guess that keeping up with the latest optimizations and protocols is
a huge undertaking.</p>

<p>When speaking with Akamai, I got the impression that they really don’t
care to sell their static object delivery product by itself. Their reps
focused mostly on trying to upsell their Dynamic Site Acceleration
product. While DSA might indeed be a great product, it wasn’t what we
were interested in.</p>

<p>In the end, the best price I could get out of Akamai was more than twice
that of the next most expensive CDN in our comparison, and they wanted a
3 year contract at that price. I’m just not that into paying twice as
much for an equal product, so they were eliminated. If we should move to
a Dynamic Site Acceleration type of service later, Akamai will
definitely be re-evaluated at that time.</p>

<h3>Second elimination: LimeLight</h3>

<p>LimeLight Networks is the 2nd largest CDN provider, behind Akamai. It’s
fitting that they are right behind Akamai, because they came across like
a smaller Akamai to me. Their pricing is much more competitive than
Akamai, and performance appeared to be quite good across the board. They
supposedly have a nice web and reporting interface, but I was unable to
get a demo setup without filling out paperwork that would have required
approval from our legal department. Therein lies the problem with
LimeLight – getting them to do anything outside the everyday norm was
like pulling teeth. Like Akamai, LimeLight also is focused on the upsell
and seemed to me generally disinterested in selling their static
delivery service.</p>

<p>If for some reason, we had to switch away from our primary choice, my
second choice would likely be LimeLight Networks, but only after I was
able to obtain a demo account so that I could verify their performance
was within acceptable range and the functionality of their user
interface.</p>

<h3>Independent Performance comparisons</h3>

<p>I was able to easily procure demo accounts from EdgeCast and CacheFly,
so I set up some performance testing of our own using <a href="http://www.pingdom.com">Pingdom</a> to
download a typical JPEG image from each Pingdom POP using the origin
pull setup. Note that since Pingdom’s servers are in data centers and
not in actual residences; this isn’t a measure of end-to-end
performance, rather a way to compare apples to apples response time from
various regions around the world. The executive summary here is that
while EdgeCast “edged” out CacheFly, the real message is that any CDN is
so much better than none at all:</p>

<table>
<thead>
<tr>
<th align="left">CDN                  </th>
<th align="left"> US/Non-US    </th>
<th align="left"> Location                 </th>
<th align="left"> # of Polls </th>
<th align="left"> Avg Response Time </th>
<th align="left"> Max Response Time </th>
<th align="left"> StdDev</th>
</tr>
</thead>
<tbody>
<tr>
<td align="left">CacheFly             </td>
<td align="left"> Non-US       </td>
<td align="left"> Amsterdam 2, Netherlands </td>
<td align="left"> 289        </td>
<td align="left"> 68                </td>
<td align="left"> 4202              </td>
<td align="left"> 285.98</td>
</tr>
<tr>
<td align="left">                     </td>
<td align="left">              </td>
<td align="left"> Copenhagen, Denmark      </td>
<td align="left"> 259        </td>
<td align="left"> 158               </td>
<td align="left"> 461               </td>
<td align="left"> 36.02 </td>
</tr>
<tr>
<td align="left">                     </td>
<td align="left">              </td>
<td align="left"> Frankfurt, Germany       </td>
<td align="left"> 287        </td>
<td align="left"> 41                </td>
<td align="left"> 567               </td>
<td align="left"> 32.38 </td>
</tr>
<tr>
<td align="left">                     </td>
<td align="left">              </td>
<td align="left"> London 2, UK             </td>
<td align="left"> 290        </td>
<td align="left"> 29                </td>
<td align="left"> 2489              </td>
<td align="left"> 145.26</td>
</tr>
<tr>
<td align="left">                     </td>
<td align="left">              </td>
<td align="left"> London, UK               </td>
<td align="left"> 284        </td>
<td align="left"> 29                </td>
<td align="left"> 127               </td>
<td align="left"> 11.30 </td>
</tr>
<tr>
<td align="left">                     </td>
<td align="left">              </td>
<td align="left"> Madrid, Spain            </td>
<td align="left"> 259        </td>
<td align="left"> 201               </td>
<td align="left"> 586               </td>
<td align="left"> 31.36 </td>
</tr>
<tr>
<td align="left">                     </td>
<td align="left">              </td>
<td align="left"> Manchester, UK           </td>
<td align="left"> 281        </td>
<td align="left"> 129               </td>
<td align="left"> 1709              </td>
<td align="left"> 184.87</td>
</tr>
<tr>
<td align="left">                     </td>
<td align="left">              </td>
<td align="left"> Montreal, Canada         </td>
<td align="left"> 286        </td>
<td align="left"> 105               </td>
<td align="left"> 3084              </td>
<td align="left"> 250.63</td>
</tr>
<tr>
<td align="left">                     </td>
<td align="left">              </td>
<td align="left"> Paris, France            </td>
<td align="left"> 286        </td>
<td align="left"> 143               </td>
<td align="left"> 521               </td>
<td align="left"> 60.11 </td>
</tr>
<tr>
<td align="left">                     </td>
<td align="left">              </td>
<td align="left"> Stockholm, Sweden        </td>
<td align="left"> 286        </td>
<td align="left"> 54                </td>
<td align="left"> 882               </td>
<td align="left"> 80.88 </td>
</tr>
<tr>
<td align="left">                     </td>
<td align="left"> Non-US Total </td>
<td align="left">                          </td>
<td align="left"> 2807       </td>
<td align="left"> 94                </td>
<td align="left"> 4202              </td>
<td align="left"> 157.88           </td>
</tr>
<tr>
<td align="left">                     </td>
<td align="left"> US           </td>
<td align="left"> Atlanta, Georgia         </td>
<td align="left"> 289        </td>
<td align="left"> 16                </td>
<td align="left"> 398               </td>
<td align="left"> 23.52 </td>
</tr>
<tr>
<td align="left">                     </td>
<td align="left">              </td>
<td align="left"> Chicago, IL              </td>
<td align="left"> 288        </td>
<td align="left"> 56                </td>
<td align="left"> 2615              </td>
<td align="left"> 158.33</td>
</tr>
<tr>
<td align="left">                     </td>
<td align="left">              </td>
<td align="left"> Dallas 4, TX             </td>
<td align="left"> 286        </td>
<td align="left"> 40                </td>
<td align="left"> 960               </td>
<td align="left"> 74.61 </td>
</tr>
<tr>
<td align="left">                     </td>
<td align="left">              </td>
<td align="left"> Dallas 5, TX             </td>
<td align="left"> 289        </td>
<td align="left"> 26                </td>
<td align="left"> 1506              </td>
<td align="left"> 89.08 </td>
</tr>
<tr>
<td align="left">                     </td>
<td align="left">              </td>
<td align="left"> Dallas 6, TX             </td>
<td align="left"> 291        </td>
<td align="left"> 47                </td>
<td align="left"> 1473              </td>
<td align="left"> 132.25</td>
</tr>
<tr>
<td align="left">                     </td>
<td align="left">              </td>
<td align="left"> Denver, CO               </td>
<td align="left"> 289        </td>
<td align="left"> 216               </td>
<td align="left"> 925               </td>
<td align="left"> 72.18 </td>
</tr>
<tr>
<td align="left">                     </td>
<td align="left">              </td>
<td align="left"> Herndon, VA              </td>
<td align="left"> 288        </td>
<td align="left"> 473               </td>
<td align="left"> 3472              </td>
<td align="left"> 196.13</td>
</tr>
<tr>
<td align="left">                     </td>
<td align="left">              </td>
<td align="left"> Houston 3, TX            </td>
<td align="left"> 289        </td>
<td align="left"> 107               </td>
<td align="left"> 382               </td>
<td align="left"> 18.15 </td>
</tr>
<tr>
<td align="left">                     </td>
<td align="left">              </td>
<td align="left"> Las Vegas, NV            </td>
<td align="left"> 288        </td>
<td align="left"> 74                </td>
<td align="left"> 3044              </td>
<td align="left"> 180.60</td>
</tr>
<tr>
<td align="left">                     </td>
<td align="left">              </td>
<td align="left"> Los Angeles, CA          </td>
<td align="left"> 289        </td>
<td align="left"> 12                </td>
<td align="left"> 92                </td>
<td align="left"> 11.52 </td>
</tr>
<tr>
<td align="left">                     </td>
<td align="left">              </td>
<td align="left"> New York, NY             </td>
<td align="left"> 289        </td>
<td align="left"> 175               </td>
<td align="left"> 2571              </td>
<td align="left"> 152.29</td>
</tr>
<tr>
<td align="left">                     </td>
<td align="left">              </td>
<td align="left"> San Francisco, CA        </td>
<td align="left"> 287        </td>
<td align="left"> 28                </td>
<td align="left"> 231               </td>
<td align="left"> 24.17 </td>
</tr>
<tr>
<td align="left">                     </td>
<td align="left">              </td>
<td align="left"> Seattle, WA              </td>
<td align="left"> 288        </td>
<td align="left"> 174               </td>
<td align="left"> 1083              </td>
<td align="left"> 108.41</td>
</tr>
<tr>
<td align="left">                     </td>
<td align="left">              </td>
<td align="left"> Tampa, Florida           </td>
<td align="left"> 267        </td>
<td align="left"> 68                </td>
<td align="left"> 3048              </td>
<td align="left"> 214.49</td>
</tr>
<tr>
<td align="left">                     </td>
<td align="left">              </td>
<td align="left"> Washington, DC           </td>
<td align="left"> 286        </td>
<td align="left"> 163               </td>
<td align="left"> 1547              </td>
<td align="left"> 141.67</td>
</tr>
<tr>
<td align="left">                     </td>
<td align="left"> US Total     </td>
<td align="left">                          </td>
<td align="left"> 4303       </td>
<td align="left"> 112               </td>
<td align="left"> 3472              </td>
<td align="left"> 170.11</td>
</tr>
<tr>
<td align="left">CacheFly Total       </td>
<td align="left">              </td>
<td align="left">                          </td>
<td align="left"> 7110       </td>
<td align="left"> 105               </td>
<td align="left"> 4202              </td>
<td align="left"> 165.61</td>
</tr>
<tr>
<td align="left">                     </td>
<td align="left">              </td>
<td align="left">                          </td>
<td align="left">            </td>
<td align="left">                   </td>
<td align="left">                   </td>
<td align="left">       </td>
</tr>
<tr>
<td align="left">EdgeCast Small       </td>
<td align="left"> Non-US       </td>
<td align="left"> Amsterdam 2, Netherlands </td>
<td align="left"> 284        </td>
<td align="left"> 62                </td>
<td align="left"> 381               </td>
<td align="left"> 27.49 </td>
</tr>
<tr>
<td align="left">                     </td>
<td align="left">              </td>
<td align="left"> Copenhagen, Denmark      </td>
<td align="left"> 254        </td>
<td align="left"> 126               </td>
<td align="left"> 1148              </td>
<td align="left"> 87.72 </td>
</tr>
<tr>
<td align="left">                     </td>
<td align="left">              </td>
<td align="left"> Frankfurt, Germany       </td>
<td align="left"> 284        </td>
<td align="left"> 40                </td>
<td align="left"> 318               </td>
<td align="left"> 19.05 </td>
</tr>
<tr>
<td align="left">                     </td>
<td align="left">              </td>
<td align="left"> London 2, UK             </td>
<td align="left"> 284        </td>
<td align="left"> 26                </td>
<td align="left"> 975               </td>
<td align="left"> 59.59 </td>
</tr>
<tr>
<td align="left">                     </td>
<td align="left">              </td>
<td align="left"> London, UK               </td>
<td align="left"> 283        </td>
<td align="left"> 23                </td>
<td align="left"> 191               </td>
<td align="left"> 14.38 </td>
</tr>
<tr>
<td align="left">                     </td>
<td align="left">              </td>
<td align="left"> Madrid, Spain            </td>
<td align="left"> 252        </td>
<td align="left"> 176               </td>
<td align="left"> 1174              </td>
<td align="left"> 112.31</td>
</tr>
<tr>
<td align="left">                     </td>
<td align="left">              </td>
<td align="left"> Manchester, UK           </td>
<td align="left"> 275        </td>
<td align="left"> 86                </td>
<td align="left"> 1494              </td>
<td align="left"> 118.26</td>
</tr>
<tr>
<td align="left">                     </td>
<td align="left">              </td>
<td align="left"> Montreal, Canada         </td>
<td align="left"> 283        </td>
<td align="left"> 163               </td>
<td align="left"> 601               </td>
<td align="left"> 59.56 </td>
</tr>
<tr>
<td align="left">                     </td>
<td align="left">              </td>
<td align="left"> Paris, France            </td>
<td align="left"> 283        </td>
<td align="left"> 94                </td>
<td align="left"> 1537              </td>
<td align="left"> 140.76</td>
</tr>
<tr>
<td align="left">                     </td>
<td align="left">              </td>
<td align="left"> Stockholm, Sweden        </td>
<td align="left"> 271        </td>
<td align="left"> 162               </td>
<td align="left"> 967               </td>
<td align="left"> 81.87 </td>
</tr>
<tr>
<td align="left">                     </td>
<td align="left"> Non-US Total </td>
<td align="left">                          </td>
<td align="left"> 2753       </td>
<td align="left"> 94                </td>
<td align="left"> 1537              </td>
<td align="left"> 99.35            </td>
</tr>
<tr>
<td align="left">                     </td>
<td align="left"> US           </td>
<td align="left"> Atlanta, Georgia         </td>
<td align="left"> 284        </td>
<td align="left"> 129               </td>
<td align="left"> 523               </td>
<td align="left"> 34.51</td>
</tr>
<tr>
<td align="left">                     </td>
<td align="left">              </td>
<td align="left"> Chicago, IL              </td>
<td align="left"> 284        </td>
<td align="left"> 26                </td>
<td align="left"> 463               </td>
<td align="left"> 35.86 </td>
</tr>
<tr>
<td align="left">                     </td>
<td align="left">              </td>
<td align="left"> Dallas 4, TX             </td>
<td align="left"> 277        </td>
<td align="left"> 30                </td>
<td align="left"> 339               </td>
<td align="left"> 25.79 </td>
</tr>
<tr>
<td align="left">                     </td>
<td align="left">              </td>
<td align="left"> Dallas 5, TX             </td>
<td align="left"> 284        </td>
<td align="left"> 26                </td>
<td align="left"> 581               </td>
<td align="left"> 50.32 </td>
</tr>
<tr>
<td align="left">                     </td>
<td align="left">              </td>
<td align="left"> Dallas 6, TX             </td>
<td align="left"> 284        </td>
<td align="left"> 23                </td>
<td align="left"> 430               </td>
<td align="left"> 33.68 </td>
</tr>
<tr>
<td align="left">                     </td>
<td align="left">              </td>
<td align="left"> Denver, CO               </td>
<td align="left"> 281        </td>
<td align="left"> 244               </td>
<td align="left"> 2169              </td>
<td align="left"> 150.12</td>
</tr>
<tr>
<td align="left">                     </td>
<td align="left">              </td>
<td align="left"> Herndon, VA              </td>
<td align="left"> 280        </td>
<td align="left"> 24                </td>
<td align="left"> 301               </td>
<td align="left"> 20.44 </td>
</tr>
<tr>
<td align="left">                     </td>
<td align="left">              </td>
<td align="left"> Houston 3, TX            </td>
<td align="left"> 281        </td>
<td align="left"> 115               </td>
<td align="left"> 441               </td>
<td align="left"> 40.02 </td>
</tr>
<tr>
<td align="left">                     </td>
<td align="left">              </td>
<td align="left"> Las Vegas, NV            </td>
<td align="left"> 281        </td>
<td align="left"> 56                </td>
<td align="left"> 559               </td>
<td align="left"> 34.32 </td>
</tr>
<tr>
<td align="left">                     </td>
<td align="left">              </td>
<td align="left"> Los Angeles, CA          </td>
<td align="left"> 283        </td>
<td align="left"> 11                </td>
<td align="left"> 94                </td>
<td align="left"> 8.45  </td>
</tr>
<tr>
<td align="left">                     </td>
<td align="left">              </td>
<td align="left"> New York, NY             </td>
<td align="left"> 284        </td>
<td align="left"> 72                </td>
<td align="left"> 1134              </td>
<td align="left"> 161.16</td>
</tr>
<tr>
<td align="left">                     </td>
<td align="left">              </td>
<td align="left"> San Francisco, CA        </td>
<td align="left"> 280        </td>
<td align="left"> 23                </td>
<td align="left"> 118               </td>
<td align="left"> 11.01 </td>
</tr>
<tr>
<td align="left">                     </td>
<td align="left">              </td>
<td align="left"> Seattle, WA              </td>
<td align="left"> 282        </td>
<td align="left"> 131               </td>
<td align="left"> 3571              </td>
<td align="left"> 333.38</td>
</tr>
<tr>
<td align="left">                     </td>
<td align="left">              </td>
<td align="left"> Tampa, Florida           </td>
<td align="left"> 260        </td>
<td align="left"> 166               </td>
<td align="left"> 4977              </td>
<td align="left"> 303.29</td>
</tr>
<tr>
<td align="left">                     </td>
<td align="left">              </td>
<td align="left"> Washington, DC           </td>
<td align="left"> 282        </td>
<td align="left"> 83                </td>
<td align="left"> 686               </td>
<td align="left"> 111.97</td>
</tr>
<tr>
<td align="left">                     </td>
<td align="left"> US Total     </td>
<td align="left">                          </td>
<td align="left"> 4207       </td>
<td align="left"> 77                </td>
<td align="left"> 4977              </td>
<td align="left"> 148.63</td>
</tr>
<tr>
<td align="left">EdgeCast Small Total </td>
<td align="left">              </td>
<td align="left">                          </td>
<td align="left"> 6960       </td>
<td align="left"> 84                </td>
<td align="left"> 4977              </td>
<td align="left"> 131.64</td>
</tr>
<tr>
<td align="left">                     </td>
<td align="left">              </td>
<td align="left">                          </td>
<td align="left">            </td>
<td align="left">                   </td>
<td align="left">                   </td>
<td align="left">       </td>
</tr>
<tr>
<td align="left">Data Center          </td>
<td align="left"> Non-US       </td>
<td align="left"> Amsterdam 2, Netherlands </td>
<td align="left"> 292        </td>
<td align="left"> 837               </td>
<td align="left"> 1344              </td>
<td align="left"> 35.72 </td>
</tr>
<tr>
<td align="left">                     </td>
<td align="left">              </td>
<td align="left"> Copenhagen, Denmark      </td>
<td align="left"> 262        </td>
<td align="left"> 990               </td>
<td align="left"> 4195              </td>
<td align="left"> 297.90</td>
</tr>
<tr>
<td align="left">                     </td>
<td align="left">              </td>
<td align="left"> Frankfurt, Germany       </td>
<td align="left"> 291        </td>
<td align="left"> 867               </td>
<td align="left"> 1533              </td>
<td align="left"> 57.14 </td>
</tr>
<tr>
<td align="left">                     </td>
<td align="left">              </td>
<td align="left"> London 2, UK             </td>
<td align="left"> 291        </td>
<td align="left"> 725               </td>
<td align="left"> 1065              </td>
<td align="left"> 25.95 </td>
</tr>
<tr>
<td align="left">                     </td>
<td align="left">              </td>
<td align="left"> London, UK               </td>
<td align="left"> 290        </td>
<td align="left"> 811               </td>
<td align="left"> 1114              </td>
<td align="left"> 49.50 </td>
</tr>
<tr>
<td align="left">                     </td>
<td align="left">              </td>
<td align="left"> Madrid, Spain            </td>
<td align="left"> 262        </td>
<td align="left"> 1005              </td>
<td align="left"> 1765              </td>
<td align="left"> 75.84 </td>
</tr>
<tr>
<td align="left">                     </td>
<td align="left">              </td>
<td align="left"> Manchester, UK           </td>
<td align="left"> 281        </td>
<td align="left"> 899               </td>
<td align="left"> 8928              </td>
<td align="left"> 580.11</td>
</tr>
<tr>
<td align="left">                     </td>
<td align="left">              </td>
<td align="left"> Montreal, Canada         </td>
<td align="left"> 291        </td>
<td align="left"> 342               </td>
<td align="left"> 412               </td>
<td align="left"> 11.52 </td>
</tr>
<tr>
<td align="left">                     </td>
<td align="left">              </td>
<td align="left"> Paris, France            </td>
<td align="left"> 293        </td>
<td align="left"> 1128              </td>
<td align="left"> 2680              </td>
<td align="left"> 230.78</td>
</tr>
<tr>
<td align="left">                     </td>
<td align="left">              </td>
<td align="left"> Stockholm, Sweden        </td>
<td align="left"> 292        </td>
<td align="left"> 1063              </td>
<td align="left"> 4056              </td>
<td align="left"> 367.89</td>
</tr>
<tr>
<td align="left">                     </td>
<td align="left"> Non-US Total </td>
<td align="left">                          </td>
<td align="left"> 2845       </td>
<td align="left"> 864               </td>
<td align="left"> 8928              </td>
<td align="left"> 326.71           </td>
</tr>
<tr>
<td align="left">                     </td>
<td align="left"> US           </td>
<td align="left"> Atlanta, Georgia         </td>
<td align="left"> 291        </td>
<td align="left"> 316               </td>
<td align="left"> 1017              </td>
<td align="left"> 63.48 </td>
</tr>
<tr>
<td align="left">                     </td>
<td align="left">              </td>
<td align="left"> Chicago, IL              </td>
<td align="left"> 290        </td>
<td align="left"> 170               </td>
<td align="left"> 253               </td>
<td align="left"> 7.02  </td>
</tr>
<tr>
<td align="left">                     </td>
<td align="left">              </td>
<td align="left"> Dallas 4, TX             </td>
<td align="left"> 292        </td>
<td align="left"> 191               </td>
<td align="left"> 3214              </td>
<td align="left"> 253.67</td>
</tr>
<tr>
<td align="left">                     </td>
<td align="left">              </td>
<td align="left"> Dallas 5, TX             </td>
<td align="left"> 292        </td>
<td align="left"> 145               </td>
<td align="left"> 263               </td>
<td align="left"> 14.52 </td>
</tr>
<tr>
<td align="left">                     </td>
<td align="left">              </td>
<td align="left"> Dallas 6, TX             </td>
<td align="left"> 291        </td>
<td align="left"> 147               </td>
<td align="left"> 358               </td>
<td align="left"> 22.93 </td>
</tr>
<tr>
<td align="left">                     </td>
<td align="left">              </td>
<td align="left"> Denver, CO               </td>
<td align="left"> 291        </td>
<td align="left"> 71                </td>
<td align="left"> 272               </td>
<td align="left"> 14.63 </td>
</tr>
<tr>
<td align="left">                     </td>
<td align="left">              </td>
<td align="left"> Herndon, VA              </td>
<td align="left"> 293        </td>
<td align="left"> 316               </td>
<td align="left"> 487               </td>
<td align="left"> 15.43 </td>
</tr>
<tr>
<td align="left">                     </td>
<td align="left">              </td>
<td align="left"> Houston 3, TX            </td>
<td align="left"> 293        </td>
<td align="left"> 177               </td>
<td align="left"> 372               </td>
<td align="left"> 19.66 </td>
</tr>
<tr>
<td align="left">                     </td>
<td align="left">              </td>
<td align="left"> Las Vegas, NV            </td>
<td align="left"> 290        </td>
<td align="left"> 246               </td>
<td align="left"> 3194              </td>
<td align="left"> 392.02</td>
</tr>
<tr>
<td align="left">                     </td>
<td align="left">              </td>
<td align="left"> Los Angeles, CA          </td>
<td align="left"> 291        </td>
<td align="left"> 303               </td>
<td align="left"> 1188              </td>
<td align="left"> 57.60 </td>
</tr>
<tr>
<td align="left">                     </td>
<td align="left">              </td>
<td align="left"> New York, NY             </td>
<td align="left"> 290        </td>
<td align="left"> 346               </td>
<td align="left"> 1120              </td>
<td align="left"> 123.55</td>
</tr>
<tr>
<td align="left">                     </td>
<td align="left">              </td>
<td align="left"> San Francisco, CA        </td>
<td align="left"> 293        </td>
<td align="left"> 229               </td>
<td align="left"> 519               </td>
<td align="left"> 22.28 </td>
</tr>
<tr>
<td align="left">                     </td>
<td align="left">              </td>
<td align="left"> Seattle, WA              </td>
<td align="left"> 290        </td>
<td align="left"> 489               </td>
<td align="left"> 1078              </td>
<td align="left"> 170.33</td>
</tr>
<tr>
<td align="left">                     </td>
<td align="left">              </td>
<td align="left"> Tampa, Florida           </td>
<td align="left"> 270        </td>
<td align="left"> 331               </td>
<td align="left"> 4105              </td>
<td align="left"> 247.99</td>
</tr>
<tr>
<td align="left">                     </td>
<td align="left">              </td>
<td align="left"> Washington, DC           </td>
<td align="left"> 290        </td>
<td align="left"> 595               </td>
<td align="left"> 1511              </td>
<td align="left"> 235.84</td>
</tr>
<tr>
<td align="left">                     </td>
<td align="left"> US Total     </td>
<td align="left">                          </td>
<td align="left"> 4347       </td>
<td align="left"> 271               </td>
<td align="left"> 4105              </td>
<td align="left"> 208.20</td>
</tr>
<tr>
<td align="left">Data Center Total    </td>
<td align="left">              </td>
<td align="left">                          </td>
<td align="left"> 7192       </td>
<td align="left"> 506               </td>
<td align="left"> 8928              </td>
<td align="left"> 390.52</td>
</tr>
</tbody>
</table>


<p>... and to really drive the point home for the PHB's, we consolidate the
data and give a very telling graph:</p>

<p><img src="/assets/images/cdn.png" alt="" /></p>

<h3>Third elimination: CacheFly</h3>

<p>CacheFly is an up-and-comer in the CDN arena. They have <strong>very</strong>
aggressive pricing, and have very good performance as well. If the site
in question was a popular blog or community website and was very price
sensitive, I would select CacheFly as my first choice CDN. However,
where they fall short is in reporting and their web interface. The best
way to contact their support department is via email or web-based form.
Their web interface left a huge amount to be desired, and they have very
little documentation on how to use it. There is no reporting whatsoever
– you get raw log files and have to write our own reporting scripts on
top of that data. I couldn't help but wonder about all the “what ifs”.
What if we get an incorrect image cached and need to have it cleared
from their network? If we see a DDoS at the CDN, how do we know? These
and other similiar questions are what ultimately eliminated CacheFly.</p>

<p>In CacheFly's defense, I was told that they were working on a complete
refactor of the user interface and was offered a chance to help beta it,
but I was under time constraints and declined. The issues I had with the
UI may or may not be present at the time of this writing.</p>

<h3>The winner (for us): EdgeCast</h3>

<p>It will appear when reading this post that I used the process of
elimination to find the "lesser of all evils", but understand that's
just the writing style I chose to convey the process. It wasn't that
EdgeCast didn't lose, it's that they won. Here's why:</p>

<ul>
<li>EdgeCast is routinely in the top tier of CDN’s in terms of
performance.</li>
<li>Their support is very knowledgeable and responsive.</li>
<li>The sales reps care about your business and are willing to work with
you.</li>
<li>They offer the most features of any CDN I evaluated. One such
feature is "rollover" where if you don't use all your allotted
transfer for one month, the remainder gets added to next months
allotment. This is perfect for a business with holiday traffic
spikes such as ours.</li>
<li>While they aren’t the cheapest CDN, they are certainly affordable,
and offered the best “bang for the buck” for the feature set we
needed.</li>
<li>Their UI is fully functional, offering configuration, reporting, and
analytics in an easy to use fashion. The UI includes a fully
functional rules engine (for additional charge) that allows you to
apply actions such as cache purge, header change, etc based upon
conditions like client IP, HTTP request header, etc.</li>
<li>Last but certainly not least, the company is one of only two
profitable CDN’s in the market today.</li>
</ul>


<h3>IT'S NOT THE DESTINATION, IT'S THE JOURNEY!!!</h3>

<p>Please don't read this article and walk away saying "Justin recommends
EdgeCast, that's who we're going with". For one, if you're letting my
blog posts make business decisions for you instead of doing due
diligence, then you're doing it wrong.</p>

<p>For our <strong>very specific needs</strong> EdgeCast was the best fit. For your
needs, you will very possibly arrive at a completely different decision,
and that's great. By all means, blog about it. What I'm trying to convey
is that there are a lot of points of comparison when going through your
evaluation, and not all of them are obvious. It's hard to get an
objective point of view when doing this on your own -- this is my best
attempt at documenting what I came across.</p>

<p>Hopefully if you haven't implemented a CDN for your busy sites, this
post will motivate you to do so. If you're unhappy with your current
CDN, perhaps this post has given you some insight on how to find a
replacement. If you're happy with your current CDN, please leave
comments as to why.</p>

<p>Lastly, I was in no way influenced monetarily or otherwise by any
vendors, and none of the links in this article contain referral ID's.
This is all my personal opinion and in no way represents the opinion of
my employers.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Case Study in Migrating XML to Drupal using Migrate]]></title>
    <link href="http://sysadminsjourney.com/content/2010/07/14/case-study-migrating-xml-drupal-using-migrate"/>
    <updated>2010-07-14T00:00:00-05:00</updated>
    <id>http://sysadminsjourney.com/content/2010/07/14/case-study-in-migrating-xml-to-drupal-using-migrate</id>
    <content type="html"><![CDATA[<p>Sorry for the lack of posts as of late -- a massive upgrade operation at
$DAYJOB has had me out of commission for a few weeks. Also, I've had the great
fortune to be able to be part of a migration to Drupal which exposed me to
<a href="http://drupal.org/project/migrate">migrate</a> and friends. Yes, I said "great
fortune" in the same sentence with "migration" without using a negative -
that's just how awesome this module is. My first impression when looking at
the documentation for migrate was that it didn't seem complete. While it's
true that the documentation could be better (what module couldn't use better
documentation?), the problem is that no two migrations are alike. Because of
this, the best documentation is not going to be written by the module authors,
it will be written by the module <em>users</em> - they are the ones that come up with
the recipies to fill the cookbook. There are several good reasons why there
aren't many recipes available:</p>

<ul>
<li>Developers don't like doing migrations. It can be painful, and often takes quite a bit of time.</li>
<li>Users don't like migrations. They see a migration of data as something easily done, and they often get sticker shock when presented with estimates for a large migration.</li>
<li>Migration code is written in a flurry before the site is active. Right before launch, development crescendos, and then is often never used again (because no two migrations are the same).
This being my first migration, I vowed that I would document my experience,
because I learned so much from it. In this particular migration, we had to
migrate a huge XML file into about 2,200 nodes in 3 content types. Read on for
my contribution to the cookbook! First, some discussion on the general
workflow and some design decisions. Since I had to get XML into the database
before I could run the migrate, I wrote a command line script to do just that.
When you need to manipulate data between your source and destination (i.e.,
change all references to www.olddomain.com to www.newdomain.com), you usually
have to do this via the hooks that the migrate module provides. In my case,
there were a few cases where doing the data munging in the command line script
was much easier than doing it within the hooks. The problem with making
transformations within the command line script is that with every change, I
had to re-run the script. This wasn't a big deal, as the XML to MySQL script
took around 15 seconds to complete. I also quickly discovered that if you have
less than 10 entities of one type (Story content type, user, etc), it's
usually better to just hand-migrate them. The most straight-forward migration
will take 1 hour at a minimum to setup and test -- if it will take less than
that to copy/paste, save your time and do it the less sexy way. Since we had
to transform the XML into MySQL tables, and there was a lot of data in the XML
that we didn't need, I decided the best way to dynamically change what we
import and what we didn't was by using hook_install() and Drupal's DB schema
API. By naming the MySQL table columns the same as the XML attributes, we can
add and remove data to be transformed quite easily. Lastly, I need to re-
iterate that this was my first migration. What I describe here works for me,
but may very well not be the best way to do it. Also, I will not duplicate
what you can learn from the migrate module documentation, so make sure to read
that first. Let me know any suggestions you may have in the comments.</li>
</ul>


<h2>Install Module Dependencies</h2>

<p>The first step is to install module dependencies. You'll need
<a href="http://drupal.org/project/views">Views</a>,
<a href="http://drupal.org/project/schema">Schema</a>, <a href="http://drupal.org/project/tw">Table Wizard(tw)</a>. You'll also want to install
<a href="http://drupal.org/project/migrate">Migrate</a>, and <a href="http://drupal.org/project/migrate_extras">Migrate Extras</a> if you want to do any work
with CCK fields. I must admit that I hadn't seen Table Wizard before this
project, but it will always be present in my dev installs from here out. If
you find yourself using SQLYog, PHPMyAdmin, or some other tool to simply look
at data in the database, be sure to check it out.</p>

<h2>Create Our Custom Module</h2>

<p>As I mentioned above, we are relying on the Drupal Schema API to make a lot of
this easy, so let's make a custom module that sets up our schemas for us.
We'll call this module my_import. Create a new directory in your modules
directory, and name it my_import. First, create my_import.info with this
inside:
<div>
  <pre><code class='ini'>name = My Import
description = &quot;An import module.&quot;
core = 6.x
dependencies[] = migrate
dependencies[] = migrate_extras
dependencies[] = content
dependencies[] = path_redirect
package = Database</code></pre>
</div>
</p>

<p>Nothing too wild here, just requiring some modules that we'll
be using later. Now, create my_import.install in the same directory with this
inside:
<div>
  <pre><code class='php'>&amp;lt;?php
function my_import_schema() {
  $schema = array();&lt;/p&gt;

&lt;p&gt;  $schema['clickability_articles'] = array(&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;'fields' =&amp;gt; array(
  'id' =&amp;gt; array(
    'type' =&amp;gt; 'int',
    'not null' =&amp;gt; TRUE,
    'description' =&amp;gt; t('Clickability article ID'),
  ),
  'createDate' =&amp;gt; array(
    'type' =&amp;gt; 'datetime',
    'not null' =&amp;gt; TRUE,
    'description' =&amp;gt; t('Clickability article creation date.'),
  ),
  'editDate' =&amp;gt; array(
    'type' =&amp;gt; 'datetime',
    'not null' =&amp;gt; TRUE,
    'description' =&amp;gt; t('Clickability article edit date'),
  ),
  'title' =&amp;gt; array(
    'type' =&amp;gt; 'text',
    'not null' =&amp;gt; TRUE,
    'description' =&amp;gt; t('Clickability article title'),
  ),
  'author' =&amp;gt; array(
    'type' =&amp;gt; 'text',
    'not null' =&amp;gt; FALSE,
    'description' =&amp;gt; t('Clickability content author (optional)'),
  ),
  'articleauthor' =&amp;gt; array(
    'type' =&amp;gt; 'text',
    'not null' =&amp;gt; TRUE,
    'description' =&amp;gt; t('Clickability article author'),
  ),
  'summary' =&amp;gt; array(
    'type' =&amp;gt; 'text',
    'not null' =&amp;gt; TRUE,
    'description' =&amp;gt; t('Clickability article short summary'),
  ),
  'body' =&amp;gt; array(
    'type' =&amp;gt; 'text',
    'not null' =&amp;gt; TRUE,
    'size' =&amp;gt; 'big',
    'description' =&amp;gt; t('Clickability article body'),
  ),
  'placement' =&amp;gt; array(
    'type' =&amp;gt; 'text',
    'not null' =&amp;gt; FALSE,
    'description' =&amp;gt; t('Clickability article related article placement lists'),
  ),
  'thumbnail' =&amp;gt; array(
    'type' =&amp;gt; 'text',
    'not null' =&amp;gt; FALSE,
    'description' =&amp;gt; t('Clickability article thumbnail'),
  ),
  'image' =&amp;gt; array(
    'type' =&amp;gt; 'text',
    // @todo: Some articles do not have an image, but we require Master Image to be set.
    'not null' =&amp;gt; FALSE,
    'description' =&amp;gt; t('Clickability article image'),
  ),
  'image2' =&amp;gt; array(
    'type' =&amp;gt; 'text',
    'not null' =&amp;gt; FALSE,
    'description' =&amp;gt; t('Clickability article image page 2'),
  ),
  'image3' =&amp;gt; array(
    'type' =&amp;gt; 'text',
    'not null' =&amp;gt; FALSE,
    'description' =&amp;gt; t('Clickability article image page 3'),
  ),
  'master_image_byline_title' =&amp;gt; array(
    'type' =&amp;gt; 'text',
    'not null' =&amp;gt; FALSE,
    'description' =&amp;gt; t('Clickability article image page 7'),
  ),
  'tags' =&amp;gt; array(
    'type' =&amp;gt; 'text',
    'not null' =&amp;gt; FALSE,
    'description' =&amp;gt; t('Clickability article image page 7'),
  ),
  'status' =&amp;gt; array(
    'type' =&amp;gt; 'text',
    'not null' =&amp;gt; TRUE,
    'description' =&amp;gt; t('Clickability article status'),
  ),
  'websitePlacements' =&amp;gt; array(
    'type' =&amp;gt; 'text',
    'not null' =&amp;gt; TRUE,
    'description' =&amp;gt; t('Clickability book review status'),
  ),
  ),
'primary key' =&amp;gt; array('id'),
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;  );
  return $schema;
}&lt;/p&gt;

&lt;p&gt;function my_import_install() {
  $ret = drupal_install_schema('my_import');
  return $ret;
}&lt;/p&gt;

&lt;p&gt;function my_import_uninstall() {
  $ret = drupal_uninstall_schema('my_import');
  return $ret;
}</code></pre>
</div>
</p>

<p>When I created the schema, I took care to make sure
that the column names in my table exactly matched the attributes and elements
I was looking to pull out of the XML file. This saves a lot of coding later.
Any time we change the schema, you can create a hook_update_N() function, or
just change the schema and disable+uninstall+install the custom module. I did
the latter with a drush alias and it worked well. The hook_install() and
hook_uninstall() functions simply add and remove the tables.</p>

<h2>Setup the Command Line Script to Import the XML into the DB</h2>

<p>Create the file myimport.php in your module directory, and paste in the
following:
<div>
  <pre><code class='php'>&lt;/p&gt;

&lt;h1&gt;!/usr/bin/php&lt;/h1&gt;

&lt;p&gt;&amp;lt;?php
// get the path to our XML file
$args = getopt(&quot;f:&quot;);&lt;/p&gt;

&lt;p&gt;// Bootstrap Drupal
require_once './includes/bootstrap.inc';
drupal_bootstrap(DRUPAL_BOOTSTRAP_FULL);&lt;/p&gt;

&lt;p&gt;// Make sure my_import is enabled
if (!module_exists('my_import')) {
  echo &quot;I need the my_import module enabled!  Exiting.\n&quot;;
  exit(1);
}&lt;/p&gt;

&lt;p&gt;/&lt;em&gt;
 * Make sure our media directory exists.
 * We will import from this directory into whatever directory filefield is configured for
 * so we should remove this dir when done with the migration.
 &lt;/em&gt;/
$media_dir = file_directory_path() .'/migrated';
echo &quot;Media dir = $media_dir\n&quot;;
if (! is_dir($media_dir)) {
  mkdir($media_dir);
}&lt;/p&gt;

&lt;p&gt;// Slurp in our XML file.  If your XML file is huge, watch your PHP memory limits
$xml = simplexml_load_file($args['f']);
echo &quot;XML Loaded.\n&quot;;&lt;/p&gt;

&lt;p&gt;$rowcount = 0;
// Here we iterate over each child of the root of the XML, which in our case is a Article
foreach ($xml-&gt;children() as $content) {
  // Setup our $obj object which represents a row in the DB, and use some caching to
  // not abuse drupal_get_schema().
  $obj = new stdClass;
  static $schema = array();&lt;/p&gt;

&lt;p&gt;  // Dereference our child from the parent $xml, or xpath performance sucks hard
  $content = simplexml_load_string($content-&gt;asXML());&lt;/p&gt;

&lt;p&gt;  $table = NULL;
  $content_type = NULL;
  switch((string) $content['type']) {&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// Add more case statements for more content types as needed
case 'Article':
  $table = 'clickability_articles';
  $content_type = 'article';
  break;
// All cases below are silently ignored - we are not importing them
case 'Book Reviews':
case 'Blog Topic':
case 'Event':
case 'Job': 
  // Ignored
  break;
default:
  // Any content type not accounted for gets reported
  echo &quot;Warning: unknown content of type &quot;. $content['type'] .&quot;\n&quot;;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;  }
  if (isset($table)) {&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;if (! isset($schema[$table])) {
  // Get the table schema from Drupal
  $schema[$table] = drupal_get_schema($table);
  // On first run, truncate the table
  $sql = &quot;truncate table {$table}&quot;;
  db_query($sql);
  echo &quot;$table truncated.\n&quot;;
}
// This function does the heavy lifting, creating the $obj object from the XML data
$obj = xml2object($content, $schema[$table], $content['type']); 
// There are some cases where $obj is intentionally null, only write to the db if not null
if ($obj) {
  $ret = drupal_write_record($table, $obj);
  if ($ret) {
    $rowcount++;
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;  }
}
echo &quot;Inserted $rowcount rows.\n&quot;;&lt;/p&gt;

&lt;p&gt;function xml2object($xml, $tableschema, $content_type) {&lt;/p&gt;

&lt;p&gt;  global $media_dir;
  $obj = new stdClass;
  // Our main iterator is the column names in the table
  foreach (array_keys($tableschema['fields']) as $field) {&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;switch($field) {
  case 'master_image_byline_title':
    // This field is populated when we work with the images later on
    break;
  case 'id':
    $obj-&amp;gt;$field = $xml[$field];
    break;
  case 'status':
    $obj-&amp;gt;$field = (string)$xml-&amp;gt;$field;
    break;
  // A Clickability placement roughly corresponds to a Drupal term
  case 'placement':
    $element =  array_pop($xml-&amp;gt;xpath(&quot;//field[@name='$field']&quot;));
    $obj-&amp;gt;$field = (string)$element-&amp;gt;row-&amp;gt;value;
    $obj-&amp;gt;$field = map_taxonomy($obj-&amp;gt;$field, $content_type);
    break;
  case 'author':
    $element =  array_pop($xml-&amp;gt;xpath(&quot;//field[@name='$field']&quot;));
    $obj-&amp;gt;$field = (string)$element-&amp;gt;value;
    break;
  case 'image2':
  case 'image3':
    // Combine image2 and image3 elements in Clickability into our multivalue filefield as csv
    if ($content_type == &quot;Article&quot;) {
      $mediaplacement = array_pop($xml-&amp;gt;xpath(&quot;//mediaPlacement[@name='$field']&quot;));
      // migrate module requires full path to filefield source
      $obj-&amp;gt;$field = getcwd() .'/'. $media_dir .'/'. (string)$mediaplacement-&amp;gt;media-&amp;gt;path;
      if (substr($obj-&amp;gt;$field, -1, 1) == '/')  {
        $obj-&amp;gt;$field = NULL;
      }
      else {
        if (!empty($obj-&amp;gt;image)) {
          $obj-&amp;gt;image .= &quot;,&quot;;
        }
        $obj-&amp;gt;image .= $obj-&amp;gt;$field;
      }
    }
    break;
  case 'thumbnail':
  case 'image':
    $mediaplacement = array_pop($xml-&amp;gt;xpath(&quot;//mediaPlacement[@name='$field']&quot;));
    // migrate module requires full path to filefield source
    $obj-&amp;gt;$field = getcwd() .'/'. $media_dir .'/'. (string)$mediaplacement-&amp;gt;media-&amp;gt;path;
    // Check the schema.  If the field is required, then fill in a default, otherwise wipe it
    $required = $tableschema['fields'][$field]['not null'];
    // If the file path ends in a /, then the XML did not have an image for this article
    // -- if we require one, make a default
    if (substr($obj-&amp;gt;$field, -1, 1) == '/')  {
      if ($required) {
        echo &quot;$content_type with ID of &quot;. $obj-&amp;gt;id .&quot; does not have a $field.  Adding test.gif.\n&quot;;
        $obj-&amp;gt;$field .= &quot;test.gif&quot;;
        touch($obj-&amp;gt;$field);
      }
      else {
        // NOTE: We need this patch for this to work: http://drupal.org/node/780920
        $obj-&amp;gt;$field = NULL;
      }
    }
    else {
      // Transfer the caption on the image in the XML to the CCK byline accreditation
      $obj-&amp;gt;master_image_byline_title = (string)$mediaplacement-&amp;gt;caption;
      // See if the file exists on the filesystem
      if (! file_exists($obj-&amp;gt;$field)) {
        // Nope, let's fill it in with our default image
        echo $obj-&amp;gt;$field .&quot; does not exist, replacing with test.gif.\n&quot;;
        $obj-&amp;gt;$field = preg_replace('#^(.*)/(.*)$#', '\1/test.gif', $obj-&amp;gt;$field);
      }

      // Replace .bmp with .jpg
      $jpg = preg_replace('/\.bmp$/', '.jpg', $obj-&amp;gt;$field);
      if ($jpg != $obj-&amp;gt;$field) {
        if (file_exists($jpg)) {
          $obj-&amp;gt;$field = $jpg;
        }
        else {
          // Tell the user what to do to create the image and exit.
          echo &quot;ID &quot;. $obj-&amp;gt;id .&quot; has a image of type bmp, and no jpg found on the file system.\n&quot;;
          echo &quot;Create them by running 'mogrify -format jpg /path/to/*.bmp' and re-run this script.\n&quot;;
          exit(1);
        }

      }
    }
    break;
  // Any DB column not explicity defined above maps cleanly with the code below
  default:
    $obj-&amp;gt;$field = (string)array_pop($xml-&amp;gt;xpath(&quot;//field[@name='$field']&quot;));
    break;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;  }&lt;/p&gt;

&lt;p&gt;  // We assume it does not need imported until we prove otherwise
  $needs_imported = FALSE;
  $tags = array();
  $websitePlacements = array();
  foreach ($xml-&gt;xpath(&quot;//websitePlacement&quot;) as $websitePlacement) {&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// Only if the XML says the domain is www.newdomain.com do we need to import
if ($websitePlacement-&amp;gt;domain == 'www.newdomain.com') {
  $needs_imported = TRUE;

  // Convert the old &quot;sections&quot; into tag taxonomy
  $tags[] = substr($section, 1, strlen($section));

  // Grab the old URLs from websitePlacement, and place them on an array
  $section = (string)$websitePlacement-&amp;gt;section;
  $oldurl = $section .'/'. $obj-&amp;gt;id .'.html';
  $websitePlacements[] = $oldurl;

  // If we do not have a placement yet, we try to set some form of taxonomy
  if (! isset($obj-&amp;gt;placement)) {
    $taxo = map_taxonomy($section, $content_type);
    // NOTE: We need this patch for this to work: http://drupal.org/node/780920
    $obj-&amp;gt;placement = $taxo;
  }
  // If the XML did not explicity tell us the createDate, we use the start date from the webSitePlacement
  if (empty($obj-&amp;gt;createDate)) {
    $date = (string)$websitePlacement-&amp;gt;startDate;
    $obj-&amp;gt;createDate = substr($date, 0, strlen($date) -4);
    $obj-&amp;gt;editDate = $obj-&amp;gt;createDate;
  }
}    
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;  }
  $obj-&gt;websitePlacements = implode(',', $websitePlacements);
  $obj-&gt;tags = implode(',', $tags);&lt;/p&gt;

&lt;p&gt;  // Return the object only if we need it imported
  return $needs_imported ? $obj : NULL;
}&lt;/p&gt;

&lt;p&gt;function map_taxonomy($oldtext, $content_type) {
  // Simple maps of Clickability placements to Drupal terms
  if ($content_type == 'Job') {&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;return NULL;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;  }
  if (preg_match('/building/i', $oldtext)) {&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;return &quot;Green Building&quot;;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;  }
  if (preg_match('/(clean|energy)/i', $oldtext)) {&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;return &quot;Clean Energy&quot;;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;  }
  if (preg_match('/financ/i', $oldtext)) {&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;return &quot;Finance&quot;;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;  }
  if (preg_match('/food/i', $oldtext)) {&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;return &quot;Food &amp;amp; Farms&quot;;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;  }
  if (preg_match('/marketing/i', $oldtext)) {&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;return &quot;Green Marketing&quot;;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;  }
  if (preg_match('/recycled/i', $oldtext)) {&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;return &quot;Recycled Markets&quot;;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;  }
  if (preg_match('/technol/i', $oldtext)) {&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;return &quot;Technology&quot;;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;  }
  if (preg_match('/leaders/i', $oldtext)) {&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;return &quot;Business Leaders&quot;;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;  }
  if (preg_match('/transportation/i', $oldtext)) {&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;return &quot;Transportation&quot;;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;  }
  return NULL;
}&lt;/p&gt;

&lt;p&gt;?&gt;</code></pre>
</div>
</p>

<p>Wow, that's a lot of code. I've commented
it pretty heavily, but here's the "40,000 foot view" of what's going on:</p>

<ul>
<li><strong>Lines 1-26:</strong> Nothing too fancy here. I should note that the script expects to be executed from your Drupal root directory. It grabs the path to the XML file from the command line and does some sanity checking.</li>
<li><strong>Lines 28-30:</strong> Here we use PHP's <a href="http://php.net/manual/en/book.simplexml.php">SimpleXML API</a> to load the entire XML file into an object. If you have a huge XML file and/or small PHP memory limits, you will likely have to use XML Parser or another library. The power and convenience of SimpleXML is a pretty convincing argument to temporarily upping your memory limits in this case.</li>
<li><strong>Lines 34-82:</strong> This is the main loop which iterates over each Article in the XML file. By looking at the content type in the XML record, we determine what table and content type to use for Drupal. The first time a schema is loaded, we truncate the table in the database. Once we determine some metadata about the record, we call xml2object() on line 72 which does most of the work for us. Once we have an object, we store it to the database.</li>
<li><strong>Lines 84-222:</strong> Here we have the xml2object() function, and yes, it's way too long and should be broken up. But hey, it's migration code, who else will ever see it??? We'll break it down more below.</li>
<li><strong>Lines 89-182:</strong> This code runs a for loop around each column in the table. Since we're using the Schema API here, we can safely assume that the column order specified in our install file will be duplicated when we fetch it in our script. For each column type in the table, it attempts to pull the data needed from the XML record, transform it if necessary, and store it in our $obj object. Read the code for details on what is happening to each field on the way in.</li>
<li><strong>Lines 184-218:</strong> Now that we have iterated over all the fields in the schema, we can use the data stored in $obj to calculate other fields we need. Again, read the code for details, but here we are setting taxonomy terms, URLs for use with path_redirect, and filling in other data that may have been missing from the XML.</li>
<li><strong>Lines 224-257:</strong> Is a simple example on how to statically map some data in the XML to return taxonomy terms in Drupal
Now that we've got that out of the way, let's create our module file.</li>
</ul>


<h2>Create my_import.module</h2>

<p>Now, create a file in your module directory named my_import.module. This file
will contain the actual module used by Drupal and will implement some of the
migrate modules hooks. You might ask, why not deal with everything in the
command line script? There are two primary reasons why:</p>

<ol>
<li>You may come across a condition where you need the nid of the node (i.e. create path redirects), or otherwise interact with the $node object. You can only get this information from implementing migrate's hooks.</li>
<li>While I personally found it easier to manipulate taxonomy terms via the command line script and then rely upon the out-of-the-box code supplied with migrate to setup the node for me, this has a drawback. Any time you change the command line script, you must "clear" your imported data, re-run the command line script, and re-import your data using the migrate module. If you make changes to your module, you only have two steps to test (clear and re-import).
Paste this code into my_import.module:
<div>
  <pre><code class='php'>&amp;lt;?php
define(NUM_PARAGRAPHS_PER_PAGE, 6);&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;function my_import_migrate_prepare_user(&amp;amp;$user, $tblinfo, $row) {
  // Randomly assign passwords to users, forcing them to reset their password
  $errors = array();
  $user['pass'] = preg_replace(&quot;/([0-9])/e&quot;,&quot;chr((\1+112))&quot;,rand(100000,999999));
  return $errors;
}&lt;/p&gt;

&lt;p&gt;function my_import_migrate_prepare_node(&amp;amp;$node, $tblinfo, $row) {
  $errors = array();
  // In Clickability, there were multiple states that represented &quot;Published&quot;, here we map them.
  $status = $tblinfo-&gt;view_name .'_status';
  switch($row-&gt;$status) {&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;case 'live':
case 'APPROVED':
  $node-&amp;gt;status = 1;
  break;
default:
  $node-&amp;gt;status = 0;
  break;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;  }&lt;/p&gt;

&lt;p&gt;  if ($node-&gt;type == 'article') {&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// Paginate articles by inserting a pagebreak tag every 6th paragraph to emulate Clickability's pagination
$paragraphs = preg_split('#&amp;lt;br /&amp;gt;\s*&amp;lt;br /&amp;gt;#s', $node-&amp;gt;body);
if (count($paragraphs) &amp;gt; NUM_PARAGRAPHS_PER_PAGE) {
  $node-&amp;gt;body = '';
  $i = 1;
  foreach ($paragraphs as $paragraph) {
    if (($i % NUM_PARAGRAPHS_PER_PAGE) == 0) {
      $node-&amp;gt;body .= $paragraph . &quot;\n[pagebreak]\n&quot;;
    }
    else {
      $node-&amp;gt;body .= $paragraph .&quot;&amp;lt;br /&amp;gt;\n&amp;lt;br /&amp;gt;\n&quot;;
    }
    $i++;
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;  }
  return $errors;
}&lt;/p&gt;

&lt;p&gt;function my_import_migrate_complete_node(&amp;amp;$node, $tblinfo, $row) {
  $errors = array();
  // Create redirects for old URLs
  $field = $tblinfo-&gt;view_name .'_websitePlacements';
  foreach(explode(',', $row-&gt;$field) as $oldurl) {&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// Delete any old redirects
if (substr($oldurl,0,1) == '/') {
  $oldurl = substr($oldurl,1);
}
path_redirect_delete(array('source' =&amp;gt; $oldurl));
$redirect = array(
  'source' =&amp;gt; $oldurl,
  'redirect' =&amp;gt; '/node/'. $node-&amp;gt;nid,
  'type' =&amp;gt; 301,
);
path_redirect_save($redirect);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;  }
  return $errors;
}</code></pre>
</div>
</p>

<p>Here's the high-level breakdown, check the code+comments for
the details.</p>

<ul>
<li><strong>Lines 5-10:</strong> Just a quick example of how to set a random password on any user that is imported.</li>
<li><strong>Lines 12-24:</strong> hook_migrate_prepare_node() is executed before the node has been saved to the database, and should be where the majority of your code is at. These lines set any article with a status of 'live' or 'APPROVED' to published in Drupal.</li>
<li><strong>Lines 26-41:</strong> This code uses some regex magic to create a pagebreak every 6th paragraph. This is what Clickability did, and the client wanted to keep this on their migrated articles.</li>
<li><strong>Lines 47-65:</strong> hook_migrate_complete_node() is called after the node has been saved to the database, and it has a nid at this point. The client wished to migrate their old URL's to Drupal -- in order to do that we must have the nid to know where to redirect to.</li>
</ul>


<h2>Create sample XML</h2>

<p>Finally, let's create some sample data so we can see how this all meshes
together. Create the file content.xml in your module directory, and paste this
in it:
<div>
  <pre><code class='xml'>&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
&lt;cmPublishImport&gt;
  &lt;content type=&quot;Article&quot; id=&quot;7241321&quot;&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;field name=&quot;title&quot;&amp;gt;&amp;lt;![CDATA[Donec risus purus]]&amp;gt;&amp;lt;/field&amp;gt;
&amp;lt;field name=&quot;author&quot;&amp;gt;
  &amp;lt;value&amp;gt;&amp;lt;![CDATA[Me]]&amp;gt;&amp;lt;/value&amp;gt;
&amp;lt;/field&amp;gt;
&amp;lt;field name=&quot;articleauthor&quot;&amp;gt;&amp;lt;![CDATA[Me]]&amp;gt;&amp;lt;/field&amp;gt;
&amp;lt;field name=&quot;date&quot;&amp;gt;&amp;lt;![CDATA[2007-04-29]]&amp;gt;&amp;lt;/field&amp;gt;
&amp;lt;field name=&quot;summary&quot;&amp;gt;&amp;lt;![CDATA[Donec risus purus]]&amp;gt;&amp;lt;/field&amp;gt;
&amp;lt;field name=&quot;body&quot;&amp;gt;&amp;lt;![CDATA[Donec risus purus, euismod eu volutpat ac, pharetra non nulla. Vestibulum quis neque lacus. Donec sit amet tortor nisi. Nam et lectus nec turpis consequat rhoncus. Proin porttitor, quam nec faucibus pulvinar, arcu magna facilisis erat, eu imperdiet risus tortor ac quam. Praesent non justo ac nisl ultricies condimentum a eget arcu. Nam in mi est. Donec risus orci, imperdiet ut tempus et, pulvinar nec diam. Donec eleifend pulvinar aliquam. Nulla faucibus turpis nec neque scelerisque convallis. Fusce gravida pulvinar quam, sit amet faucibus risus sodales ornare. Nullam arcu risus, lacinia vel faucibus at, auctor eget diam. Quisque a neque ac tellus bibendum luctus fringilla in lacus. Praesent id nunc eu dolor adipiscing consequat vel eget leo. Donec velit mi, pharetra quis tincidunt id, laoreet et dolor. Vestibulum fringilla rutrum arcu at accumsan.&amp;lt;br/&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;br/&gt;  


&lt;p&gt;Cras pellentesque sagittis mi. Pellentesque cursus nisl id nunc suscipit luctus. Duis pellentesque rhoncus sodales. Nullam dictum augue ac diam fermentum vel feugiat mauris euismod. Mauris nec metus eu sem tristique euismod. Etiam lorem est, accumsan vitae bibendum sit amet, tempus sit amet urna. Nullam lobortis adipiscing convallis. Nullam scelerisque sagittis tellus vitae interdum. Integer eget interdum nunc. Nam ligula orci, bibendum ac mattis eget, mollis at massa.&lt;br/&gt;&lt;/p&gt;

&lt;br/&gt;  


&lt;p&gt;Vestibulum sodales elit vel est feugiat vitae dapibus erat ultricies. Proin auctor quam sit amet nisi aliquet pharetra. Curabitur tristique quam vel tortor gravida scelerisque. Morbi laoreet aliquet mi, sed imperdiet mauris mattis et. Praesent non quam nec lorem dapibus semper. Quisque vulputate neque et turpis placerat bibendum. Phasellus suscipit urna eget augue ullamcorper ultricies. Curabitur hendrerit dui sit amet elit elementum nec venenatis orci tempor. Fusce semper vestibulum odio vitae porta. Mauris non tellus non mi hendrerit suscipit in sed ante. Donec arcu neque, tristique ut elementum sed, suscipit at leo. Curabitur eget enim quis leo scelerisque laoreet et eget augue. Fusce posuere est ac felis fringilla consectetur. Nulla elit magna, pharetra sit amet tincidunt sed, tristique sed mi. Nam iaculis, elit sit amet condimentum blandit, massa neque pharetra justo, non ornare ligula ante non leo. Praesent ullamcorper suscipit tempus. In varius, neque eget volutpat posuere, velit odio luctus turpis, ac varius nulla erat sit amet justo. Quisque convallis mollis pharetra. Aliquam porta dolor quis nunc tempor vitae pharetra lectus ultricies. Fusce egestas sagittis sapien, sit amet pharetra sem ullamcorper a.&lt;br/&gt;&lt;/p&gt;

&lt;br/&gt;  


&lt;p&gt;Ut dui tortor, porta eu ultrices sed, interdum vitae lectus. Integer facilisis velit sit amet dui ultricies lobortis. Fusce ut malesuada tellus. Aenean in nibh at lorem iaculis dictum vitae in nulla. Etiam dapibus lacinia eleifend. Aliquam erat volutpat. Nullam sit amet sapien ut risus consequat posuere eu quis quam. In lobortis fringilla felis quis pretium. Suspendisse non nisl libero, non tempor justo. Nunc volutpat nulla vitae lacus tincidunt feugiat congue sapien commodo. Suspendisse venenatis aliquet ante in hendrerit. Sed lectus ligula, gravida id tincidunt et, feugiat non justo.&lt;br/&gt;&lt;/p&gt;

&lt;br/&gt;  


&lt;p&gt;Sed metus tellus, vestibulum in mollis quis, imperdiet et velit. Praesent suscipit elit et mi rutrum sit amet gravida augue iaculis. Etiam nec tellus nec augue porttitor pharetra. Vivamus feugiat mollis est, eu aliquam neque tempus a. Ut magna mauris, sollicitudin in ornare non, lacinia a lacus. Aenean porttitor magna ac sem ornare pellentesque. Aliquam mattis dolor in metus molestie ut feugiat mi auctor. Etiam laoreet pulvinar ipsum id bibendum. Class aptent taciti sociosqu ad litora torquent per conubia nostra, per inceptos himenaeos. Quisque porttitor convallis lacus, nec pretium leo varius non. Morbi non dapibus diam. Sed nec venenatis diam. Cras mollis porta tempor.&lt;br/&gt;&lt;/p&gt;

&lt;br/&gt;  


&lt;p&gt;Donec ornare mi sed tellus porta luctus. Nulla euismod venenatis ante, in rhoncus felis ornare non. Cras tempor venenatis est at gravida. Etiam imperdiet dolor vitae ipsum lacinia imperdiet. Maecenas purus lorem, rhoncus non porttitor in, semper nec quam. Integer ullamcorper facilisis ultrices. Vivamus porttitor lacinia augue in venenatis. Quisque interdum euismod tellus, et consectetur nunc dictum sit amet. Maecenas pulvinar placerat mauris, quis auctor purus pellentesque at. Vestibulum vulputate, tellus id eleifend posuere, ligula erat hendrerit orci, nec lobortis tortor sapien ut ligula. Donec id augue leo, non consectetur nisl. In viverra dictum lorem eget blandit. Etiam tempus nisl ac nibh viverra id cursus eros luctus. Duis ut tellus nisi.&lt;br/&gt;&lt;/p&gt;

&lt;br/&gt;  


&lt;p&gt;Class aptent taciti sociosqu ad litora torquent per conubia nostra, per inceptos himenaeos. Aliquam quis justo risus, eget eleifend nibh. Morbi quis dolor nulla, sed cursus metus. Vestibulum vel ipsum non erat tincidunt luctus et eget sapien. Nunc vel justo ante, vel auctor purus. Proin vulputate bibendum placerat. Fusce vel tincidunt nunc. Praesent at eros in dolor faucibus blandit et vitae magna. Fusce arcu nisl, sollicitudin sed accumsan sed, rhoncus at tellus. Ut ut mauris vel ipsum bibendum ullamcorper eget sed neque. Class aptent taciti sociosqu ad litora torquent per conubia nostra, per inceptos himenaeos. Sed dui massa, imperdiet sit amet lacinia id, rutrum sed orci. Proin pharetra risus eu risus gravida convallis id ac mi. Etiam a neque ut lacus convallis accumsan non eget arcu. Sed blandit velit id lectus tincidunt ut aliquet mi egestas. Aliquam cursus odio vitae turpis suscipit mollis et aliquam purus. Suspendisse pretium tincidunt porttitor. Nunc vestibulum, lacus at auctor laoreet, orci lectus volutpat diam, ut mollis risus lectus a ligula.&lt;br/&gt;&lt;/p&gt;

&lt;br/&gt;  


&lt;p&gt;Phasellus id urna sit amet elit pretium viverra sit amet eget felis. Maecenas sed arcu sed eros fringilla commodo id non magna. Maecenas urna mauris, cursus vel mattis et, volutpat in purus. Nulla sapien orci, faucibus sed tincidunt tincidunt, tristique id lacus. Nullam tortor libero, porttitor eget faucibus eget, vehicula a enim. Suspendisse malesuada consectetur mattis. Integer dapibus dignissim tempor. In viverra luctus orci sed placerat. Suspendisse aliquam mattis diam mattis dapibus. Aenean suscipit purus eu ipsum dignissim in aliquet urna mollis. Duis nibh magna, fringilla eu ultrices posuere, sodales sed felis. Proin varius dignissim sem a consequat. Pellentesque facilisis felis vel mi malesuada placerat. Curabitur gravida euismod mi in molestie. Vivamus sit amet dui leo. Praesent mi justo, bibendum at rutrum ac, bibendum ut felis. Nullam nec dolor dui, quis imperdiet nulla. Morbi semper pulvinar risus.]]&amp;gt;&lt;/field&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;mediaPlacement name=&quot;image&quot;&amp;gt;
  &amp;lt;media id=&quot;577286&quot;&amp;gt;
    &amp;lt;path&amp;gt;images/1.jpg&amp;lt;/path&amp;gt;
    &amp;lt;caption&amp;gt;&amp;lt;![CDATA[Cows at Three Mile Canyon provide resources such as methane and compost for on-farm operations.]]&amp;gt;&amp;lt;/caption&amp;gt;
  &amp;lt;/media&amp;gt;
&amp;lt;/mediaPlacement&amp;gt;
&amp;lt;status&amp;gt;live&amp;lt;/status&amp;gt;
&amp;lt;websitePlacement&amp;gt;
  &amp;lt;domain&amp;gt;www.newdomain.com&amp;lt;/domain&amp;gt;
  &amp;lt;section&amp;gt;/foodandfarms&amp;lt;/section&amp;gt;
  &amp;lt;startDate dateFormat=&quot;yyyy-MM-dd HH:mm:ss zzz&quot;&amp;gt;2007-04-29 14:00:00 PDT&amp;lt;/startDate&amp;gt;
&amp;lt;/websitePlacement&amp;gt;
&amp;lt;websitePlacement&amp;gt;
  &amp;lt;domain&amp;gt;www.olddomain.com&amp;lt;/domain&amp;gt;
  &amp;lt;section&amp;gt;/greenmarketing&amp;lt;/section&amp;gt;
  &amp;lt;startDate dateFormat=&quot;yyyy-MM-dd HH:mm:ss zzz&quot;&amp;gt;2007-04-29 14:00:00 PDT&amp;lt;/startDate&amp;gt;
&amp;lt;/websitePlacement&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;  &lt;/content&gt;
&lt;/cmPublishImport&gt;</code></pre>
</div>
</p>

<h2>Enable the my_import Module and Run the Command Line Script</h2>

<p>Now (finally), it's time for some action. Enable your newly created my_import
module, and jump out to the shell. Assuming your Drupal root is at
/var/www/drupal, cd into that directory. Create the new directory
sites/default/files/migrated/images, and place a jpg named 1.jpg in that
directory. Now run the import script:</p>

<pre><code>php5 ./sites/all/modules/my_import/myimport.php  -f ./sites/all/modules/my_import/content.xml
</code></pre>

<p>With luck, the script will succeed, and you will have 1 row of data in your
clickability_articles table! If not, fix the error (if you're using the sample
data, let me know what went wrong and I'll fix it). Next up, Table Wizard
configuration.</p>

<h2>Expose the Table to Table Wizard</h2>

<p>All the hard work is done now - we can use a web UI from here on out. Visit
/admin/content/tw in your browser, and under the "Add Existing Tables"
fieldset, and select the tables you imported with myimport.php. If your tables
are huge (50K+ rows), you may want to select "Skip full analysis". Click the
"Add tables" button. At this point, that's all we need from Table Wizard, but
I strongly encourage you click around a bit. The table analysis can tell you
some handy things about your data.</p>

<h2>Create the Migrate Content Set</h2>

<p>In the previous step, we essentially built a view that we can provide to the
Migrate module. Now we need to tell Migrate how to use the view. Visit the
Migrate settings at /admin/content/migrate/settings. If you can, implement the
changes it recommends to .htaccess as it will speed up the import
considerably. Also, make sure to expand the "Migration support implemented in
the XYZ module" fieldsets and enable the support you need for your import.
Now, visit the dashboard at /admin/content/migrate. Expand the "Add a content
set" fieldset, and fill in the values. When choosing the value for "Source
view from which to import content", scroll down towards the bottom of the
list. All Table Wizard views are prefixed with "tw: ", so the one we're
looking for here is "tw: clickability_issues (clickability_issues)". You can
leave "View arguments" and "Weight" to defaults. The next screen is where the
real magic happens. By interrogating the view, Migrate presents you with a map
fields form that allows us to select our source column from a dropdown to
assign to various node elements. If you have a setting that should remain
constant across all imported records ("Node: Input format" is usually a good
example), you can type in a default value here. The rest should be fairly self
explanatory. Click "Submit changes", and you'll be taken back to the
dashboard.</p>

<h2>Run the Import, Clear the Import, Wash, Rinse, Repeat</h2>

<p>Now, the way I did my testing was to choose one row from the source table to
import. Grab its primary key and copy it to the clipboard. Check the box under
"Import" for our content set, then expand the "Execute" fieldset. Paste the ID
into the "Source IDs:" text field, and click the Run button. With any luck,
you will be returned to the dashboard, but the content set will show 1
imported. Hopefully there will be no errors, but if there are, find and fix
the problem. You can view the old primary key mapping to the node ID by going
back to /admin/content/tw and looking for a view named
migrate_map_si_articles. This table is created by the Migrate module -- it
uses this table to track what has been imported, and what NID the imported
nodes have. Grab that nid, and load up /node/[nid]. If it looks good, then we
can to a bigger import. Go back to the Migrate dashboard, and this time click
the "Clear" checkbox next to the content set. Expand "Execute", make sure all
fields are blank, and click the Run button. This process will "unimport" the
row we just imported. Now, depending on your row count, you may want to import
all rows and see what happens. Since I was dealing with thousands of nodes, I
did an import of just 100 nodes to make sure things were okay. To do this,
instead of specifying "Source IDs", place the number 100 in "Sample Size", and
click Run. To import everything, leave all fields blank. The power to quickly
and easily remove all changes made by the migrate module is huge. Because of
this "safety net", it lets you work on the import within the same development
sandbox as your designers and themers. They'll appreciate having something
other than "Lorem Ipsum" to look at!</p>

<h2>Run to the Nearest Pub and Celebrate the Completion of Your Migration</h2>

<p>If I have to explain this to you, you're in the wrong field of work!</p>

<h2>Summary</h2>

<p>This post is my longest to date, and there's a good chance I missed some
things. By all means, let me know in the comments if you find any holes and
I'll get it corrected. I hope this case study helps some other Drupalers out
there - when I first started this project I couldn't find any examples on how
to get XML into Drupal using the Migrate module. Now Google has some spider
food :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[My Thoughts and Ramblings on DrupalConSF 2010]]></title>
    <link href="http://sysadminsjourney.com/content/2010/04/23/my-thoughts-and-ramblings-drupalconsf-2010"/>
    <updated>2010-04-23T00:00:00-05:00</updated>
    <id>http://sysadminsjourney.com/content/2010/04/23/my-thoughts-and-ramblings-on-drupalconsf-2010</id>
    <content type="html"><![CDATA[<p>I had the great pleasure of attending my first
<a href="http://sf2010.drupal.org">DrupalCon</a> this week. Held in downtown San
Francisco at the Moscone Center, it was my opinion that this was Drupal's
"homecoming". While Drupal wasn't "born" in San Francisco, it seems to be the
city that has the strongest following. The attendance numbers didn't lie - I'm
pretty sure they broke 3,000 <del>geeks</del> attendees. I made this trip solo
-- I only knew three people that were going, and those three were only
acquaintances I'd met via email/IM a few months before. When I left, I didn't
come home with "leads" or "contacts", I came home with friends and role
models, many of whom I plan on staying in touch with. I met most of the
authors of the Drupal books I've read, associated faces to the podcasts and
RSS feeds I subscribe to, and I even had the opportunity to quickly say thanks
to Dries and shake his hand.</p>

<p>For those who didn't know, archive.org has made the sessions <a href="http://www.archive.org/search.php?query=DrupalCon&amp;sort=-publicdate">available for
download</a>,
so be sure to check those out. Read on for my "takeaways" from DCSF2010.</p>

<p>Please note that these are just what come to my mind, I'm sure I'm forgetting
huge topics. Please forgive me in advance for those!</p>

<h2>Larry Garfield is my favorite presenter of the conference</h2>

<p><a href="http://drupal.org/user/26398">Larry Garfield</a> works for
<a href="http://palantir.net/">Palantir.net</a>, and is one of the few people that I've
listened to that is immensely intelligent, yet speak well and even make a
crowd genuinely laugh out loud. I attended his "Objectifying PHP" and "Views
for Developers" sessions, and left feeling motivated and enlightened. My
thanks go out to him, as he very obviously put a lot of preparation time into
his presentations.</p>

<h2>Drupal is methodically (pun intended) implementing OO</h2>

<p>As evidenced by Larry Garfield's "Objectfying PHP" and John VanDyk's "Batch vs
Queue" session, Drupal is refactoring portions of core into classes and
methods where it fits. I'm part of the camp that welcomes the change, and
can't wait. I can't help but wonder if we'll alienate some contrib module
authors in the process, but I'm sure that it will bring the overall quality of
contrib modules up a few notches.</p>

<h2>David Strauss knows what he's talking about</h2>

<p>I've been in IT/Networking/Programming/etc for about 20 years now. While I
don't claim to be the smartest person in the group at any point in time, I
consider myself pretty well rounded. It's been a long time since someone was
able to truly talk so far over my head that I couldn't keep up, but <a href="http://fourkitchens.com/bios/david-strauss">David
Strauss</a> of <a href="http://fourkitchens.com/">Four
Kitchens</a> did just that at the <a href="http://chapterthree.com">Chapter Three
</a>open house party. We discussed HipHop PHP, operating
systems, configuration management, and god knows what else. I had to look like
a deer in headlights!</p>

<h2>HipHop PHP will eventually run Drupal</h2>

<p>I can say this because David Strauss is the one working on it. Enough said.</p>

<h2>Microsoft is playing it smart</h2>

<p>Instead of trying to compete with Drupal, they're finally trying to help
Drupal. I'm a hardcore anything-but-Microsoft OS kinda guy, but I can't
dispute that there's a lot of shops out there that already have well versed
SQL Server and IIS admins. Microsoft announced that they now have a native SQL
Server driver for PHP, and that Drupal can now run on MS SQL Server. This will
be a huge boon for getting Drupal into the Microsoft-centric enterprises -
there's no longer a need to have a MySQL guy. Oh, and <a href="http://www.sysadminsjourney.com/content/2010/04/20/2010-what-year">giving away free
alcohol</a>
never hurt either :)</p>

<h2>MongoDB will have a large impact on Drupal 7</h2>

<p><a href="http://drupal.org/user/9446">Chx</a> gave an excellent presentation - "<a href="http://sf2010.drupal.org/conference/sessions/mongodb-%0Ahumongous-drupal">MongoDB:
Humongous Drupal</a>". He covered a lot about SQL, and how over the years it's
become "best practice" to de-normalize tables to improve performance. We've
all done that, but have you ever pondered that you're breaking one of the
fundamental rules of relational databases when you've done that? While MongoDB
is perfectly suited for logging and caching in Drupal, the biggest win is with
Fields in Drupal 7. Each field you create results in a new table that must be
added to a JOIN when building a node. Shops with a lot of fields on their
nodes will likely see huge gains in performance by moving to MongoDB for those
tables.</p>

<h2>Big Drupal is Big</h2>

<p>Hey, did you hear that Drupal powers whitehouse.gov? Seriously, there's been a
lot of progress in the past year with regards to making Drupal scale. <a href="http://getpantheon.com/mercury/what-is-mercury">Project
Mercury</a> from the great folks
at <a href="http://www.chapterthree.com">Chapter Three</a> makes Big Drupal easy, and is
now supported on Amazon's EC2, Rackspace, and
<a href="http://www.linode.com/?r=c4f79463ba583ec1f15e3307190bda4bda9d65df">Linode</a>
<shameless_plug>thanks to my
<a href="http://www.sysadminsjourney.com/content/2010/04/12/new-linode-%0Astackscript-pantheon-mercury-high-performance-drupal-10-minutes-or-%0Aless">stackscript</a></shameless_plug>. There was a huge amount of interest in Mercury and how
it all works at the conference. The BOF session was great - unfortunately I
missed the sessions where it was discussed in more detail.</p>

<h2>Chapter Three rocks</h2>

<p>Two out of the three people I knew coming into DCSF currently work for Chapter
Three, and the third person used to work for them. Special thanks to <a href="http://www.chapterthree.com/about_us/greg_coit">Greg
Coit</a> and <a href="http://uptownalmanac.com/users/kmonty">Kevin
Montgomery</a> for taking me under their
wing and introducing me to all their colleagues. I also had the pleasure to
meet <a href="http://www.chapterthree.com/blog/josh_koenig">Josh Koenig</a>, albeit
briefly. Seems the partner/CTO of one of the leading Drupal shops is a little
busy at a DrupalCon. I ended up meeting a few other guys that I clicked really
well with and hope to keep tabs on: Jeff Graham of
<a href="http://www.funnymonkey.com/">FunnyMonkey</a>, Rob Wohleb of
<a href="http://www.xomba.com/">Xomba.com</a>, and Aaron Levy of <a href="http://www.chapterthree.com">Chapter
Three</a> - thanks for the beer and discussion!</p>

<h2>Git will change Drupal.org</h2>

<p>The migration to Git can't happen fast enough for me. Aside from the ability
to commit code on a plane, contrib modules will benefit greatly. When all is
said and done, every new issue on drupal.org will have it's own repository
that any user will be able to commit to. Once the issue is resolved, the fix
will be merged back into the main module repo. That should break down even
more barriers for new contrib authors getting into Drupal development.</p>

<h2>Dries Buytaert is really tall</h2>

<p>Yes, Dries is very tall - at least 6'4" if I had to guess, but this is
actually just a way for me to remind you that I shook Dries' hand :) I was
more than a little starstruck!</p>

<p>Overall, I had a blast, and can't wait for the next DrupalCon in the states. I
heard it's in Chicago -- count me in! If you ever get the chance, I absolutely
recommend that you attend.</p>
]]></content>
  </entry>
  
</feed>
